<?xml version="1.0"?>
<facelet-taglib xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-facelettaglibrary_2_0.xsd" version="2.0">
  
  <namespace>http://myfaces.apache.org/trinidad/html</namespace>
  <tag>
    <description><![CDATA[The styleSheet tag generates the style
          sheet link reference to a generated Apache Trinidad style sheet.
          This is automatically included for you if you use the Trinidad head tag.]]></description>
    <tag-name>styleSheet</tag-name>
    <component>
      <component-type>org.apache.myfaces.trinidad.CoreStyleSheet</component-type>
      <renderer-type>org.apache.myfaces.trinidad.StyleSheet</renderer-type>
      <handler-class>org.apache.myfaces.trinidadinternal.facelets.TrinidadComponentHandler</handler-class>
    </component>
    <attribute>
      <description><![CDATA[a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.]]></description>
      <name>attributeChangeListener</name>
      <method-signature>void myMethod(org.apache.myfaces.trinidad.event.AttributeChangeEvent)</method-signature>
    </attribute>
    <attribute>
      <description><![CDATA[<html>the identifier for the component.  Every component may be named by a component identifier that must conform to the following rules:
<ul>
<li>They must start with a letter (as defined by the Character.isLetter() method) or underscore ( _ ).</li>
<li>Subsequent characters must be letters (as defined by the Character.isLetter() method), digits as defined by the Character.isDigit() method, 
dashes ( - ), or underscores ( _ ).  To minimize the size of responses generated by JavaServer Faces, it is recommended that component identifiers 
be as short as possible. If a component has been given an identifier, it must be unique in the namespace of the closest ancestor to that component 
that is a NamingContainer (if any).</li>
</ul></html>]]></description>
      <name>id</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.]]></description>
      <name>binding</name>
      <type>javax.faces.component.UIComponent</type>
    </attribute>
    <attribute>
      <description><![CDATA[whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component.]]></description>
      <name>rendered</name>
      <type>boolean</type>
    </attribute>
  </tag>
  <tag>
    <description><![CDATA[Tag for the HTML body element.]]></description>
    <tag-name>body</tag-name>
    <component>
      <component-type>org.apache.myfaces.trinidad.HtmlBody</component-type>
      <renderer-type>org.apache.myfaces.trinidad.Body</renderer-type>
      <handler-class>org.apache.myfaces.trinidadinternal.facelets.TrinidadComponentHandler</handler-class>
    </component>
    <attribute>
      <description><![CDATA[a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.]]></description>
      <name>attributeChangeListener</name>
      <method-signature>void myMethod(org.apache.myfaces.trinidad.event.AttributeChangeEvent)</method-signature>
    </attribute>
    <attribute>
      <description><![CDATA[the id of the component to which you want the
        focus to be when the full page renders. The accessibility-mode
        must be set to "inaccessible" for this feature to be on.

    This attribute is not supported on the following agent types:
 pda, phone, voice.]]></description>
      <name>initialFocusId</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[an onmousemove Javascript handler.]]></description>
      <name>onmousemove</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[the IDs of the components that should trigger a partial update.
         This component will listen on the trigger components. If one of the
         trigger components receives an event that will cause it to update
         in some way, this component will request to be updated too.]]></description>
      <name>partialTriggers</name>
      <type>java.lang.String[]</type>
    </attribute>
    <attribute>
      <description><![CDATA[an ondblclick Javascript handler.]]></description>
      <name>ondblclick</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[the inline CSS style for this element]]></description>
      <name>inlineStyle</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[an onmouseout Javascript handler.]]></description>
      <name>onmouseout</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[an onunload Javascript handler.]]></description>
      <name>onunload</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[the CSS style class of the bean.]]></description>
      <name>styleClass</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[an onkeyup Javascript handler.]]></description>
      <name>onkeyup</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[an onkeydown Javascript handler.]]></description>
      <name>onkeydown</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[an onkeypress Javascript handler.]]></description>
      <name>onkeypress</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[the short description of the bean.  This text
         is commonly used by user agents to display tooltip help text.]]></description>
      <name>shortDesc</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component.]]></description>
      <name>rendered</name>
      <type>boolean</type>
    </attribute>
    <attribute>
      <description><![CDATA[an onmouseover Javascript handler.]]></description>
      <name>onmouseover</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[<html>the identifier for the component.  Every component may be named by a component identifier that must conform to the following rules:
<ul>
<li>They must start with a letter (as defined by the Character.isLetter() method) or underscore ( _ ).</li>
<li>Subsequent characters must be letters (as defined by the Character.isLetter() method), digits as defined by the Character.isDigit() method, 
dashes ( - ), or underscores ( _ ).  To minimize the size of responses generated by JavaServer Faces, it is recommended that component identifiers 
be as short as possible. If a component has been given an identifier, it must be unique in the namespace of the closest ancestor to that component 
that is a NamingContainer (if any).</li>
</ul></html>]]></description>
      <name>id</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[an onload Javascript handler.]]></description>
      <name>onload</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[an onmouseup Javascript handler.]]></description>
      <name>onmouseup</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.]]></description>
      <name>binding</name>
      <type>javax.faces.component.UIComponent</type>
    </attribute>
    <attribute>
      <description><![CDATA[an onclick Javascript handler.]]></description>
      <name>onclick</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[an onmousedown Javascript handler.]]></description>
      <name>onmousedown</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[whether or not Trinidad will allow the first click to go
             through in certain instances. When a PPR event occurs, we block
             all subsequent user input until it completes. However, there may
             be instances where the client wants to receive the very first
             click. For example, if the user entered text in an inputText
             that fires a PPR request, then the user immediately clicked
             a submit button two events will be triggered - an onchange
             followed by an onclick. The onchange will trigger the client
             action which will immediately start the PPR blocking, so the
             onclick will get consumed by the blocking code and no submit will
             occur. Setting this value to true will allow the click to go
             through.

    This attribute is not supported on the following agent types:
 pda, phone, voice.]]></description>
      <name>firstClickPassed</name>
      <type>boolean</type>
    </attribute>
  </tag>
  <tag>
    <description><![CDATA[CellFormat components are used to format cells in a
          rowLayout component.]]></description>
    <tag-name>cellFormat</tag-name>
    <component>
      <component-type>org.apache.myfaces.trinidad.HtmlCellFormat</component-type>
      <renderer-type>org.apache.myfaces.trinidad.CellFormat</renderer-type>
      <handler-class>org.apache.myfaces.trinidadinternal.facelets.TrinidadComponentHandler</handler-class>
    </component>
    <attribute>
      <description><![CDATA[a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.]]></description>
      <name>attributeChangeListener</name>
      <method-signature>void myMethod(org.apache.myfaces.trinidad.event.AttributeChangeEvent)</method-signature>
    </attribute>
    <attribute>
      <description><![CDATA[Indicates which table cells are the headers for this cell. This
             attribute is used by screen readers to associate header
             information with data cells. This must be set to a
             space-separated list of IDs. Each ID must be the ID of a
             pertinent header cell.]]></description>
      <name>headers</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[<html>the identifier for the component.  Every component may be named by a component identifier that must conform to the following rules:
<ul>
<li>They must start with a letter (as defined by the Character.isLetter() method) or underscore ( _ ).</li>
<li>Subsequent characters must be letters (as defined by the Character.isLetter() method), digits as defined by the Character.isDigit() method, 
dashes ( - ), or underscores ( _ ).  To minimize the size of responses generated by JavaServer Faces, it is recommended that component identifiers 
be as short as possible. If a component has been given an identifier, it must be unique in the namespace of the closest ancestor to that component 
that is a NamingContainer (if any).</li>
</ul></html>]]></description>
      <name>id</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[the preferred height of the enclosed layout elements.]]></description>
      <name>height</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[an onmouseup Javascript handler.]]></description>
      <name>onmouseup</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[whether automatic text wrapping should be disabled for
              this cell.]]></description>
      <name>wrappingDisabled</name>
      <type>boolean</type>
    </attribute>
    <attribute>
      <description><![CDATA[the number of cells high the child layout element will be.]]></description>
      <name>rowSpan</name>
      <type>int</type>
    </attribute>
    <attribute>
      <description><![CDATA[the number of cells wide the child layout element will be.]]></description>
      <name>columnSpan</name>
      <type>int</type>
    </attribute>
    <attribute>
      <description><![CDATA[an onmousemove Javascript handler.]]></description>
      <name>onmousemove</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[the horizontal alignment of the grid row elements.
              The acceptable values are "center", "left", "right", "start", and "end".]]></description>
      <name>halign</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[the IDs of the components that should trigger a partial update.
         This component will listen on the trigger components. If one of the
         trigger components receives an event that will cause it to update
         in some way, this component will request to be updated too.]]></description>
      <name>partialTriggers</name>
      <type>java.lang.String[]</type>
    </attribute>
    <attribute>
      <description><![CDATA[an ondblclick Javascript handler.]]></description>
      <name>ondblclick</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[the inline CSS style for this element]]></description>
      <name>inlineStyle</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[an onmouseout Javascript handler.]]></description>
      <name>onmouseout</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[the CSS style class of the bean.]]></description>
      <name>styleClass</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[the preferred width of the enclosed layout elements.]]></description>
      <name>width</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[an onkeyup Javascript handler.]]></description>
      <name>onkeyup</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[an onkeydown Javascript handler.]]></description>
      <name>onkeydown</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[an onkeypress Javascript handler.]]></description>
      <name>onkeypress</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[the short description of the bean.  This text
         is commonly used by user agents to display tooltip help text.]]></description>
      <name>shortDesc</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component.]]></description>
      <name>rendered</name>
      <type>boolean</type>
    </attribute>
    <attribute>
      <description><![CDATA[Indicates whether or not this table cell is a header cell or a data cell.
        Setting this attribute to 'true' will mark this cell as a header cell.]]></description>
      <name>header</name>
      <type>boolean</type>
    </attribute>
    <attribute>
      <description><![CDATA[an onmouseover Javascript handler.]]></description>
      <name>onmouseover</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[This attribute should be used to provide an abbreviated form of
             the cell's content, and may be rendered by user agents when
             appropriate in place of the cell's content. Abbreviated names
             should be short since user agents may render them repeatedly
             (especially if this cell is a header cell).]]></description>
      <name>shortText</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.]]></description>
      <name>binding</name>
      <type>javax.faces.component.UIComponent</type>
    </attribute>
    <attribute>
      <description><![CDATA[an onclick Javascript handler.]]></description>
      <name>onclick</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[an onmousedown Javascript handler.]]></description>
      <name>onmousedown</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[the vertical alignment of the grid row elements.
              The acceptable values are "middle", "top", and "bottom".]]></description>
      <name>valign</name>
      <type>java.lang.String</type>
    </attribute>
  </tag>
  <tag>
    <description><![CDATA[The frame component is used to specify attributes needed by an
          HTML frame.]]></description>
    <tag-name>frame</tag-name>
    <component>
      <component-type>org.apache.myfaces.trinidad.HtmlFrame</component-type>
      <renderer-type>org.apache.myfaces.trinidad.Frame</renderer-type>
      <handler-class>org.apache.myfaces.trinidadinternal.facelets.TrinidadComponentHandler</handler-class>
    </component>
    <attribute>
      <description><![CDATA[a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.]]></description>
      <name>attributeChangeListener</name>
      <method-signature>void myMethod(org.apache.myfaces.trinidad.event.AttributeChangeEvent)</method-signature>
    </attribute>
    <attribute>
      <description><![CDATA[the IDs of the components that should trigger a partial update.
         This component will listen on the trigger components. If one of the
         trigger components receives an event that will cause it to update
         in some way, this component will request to be updated too.]]></description>
      <name>partialTriggers</name>
      <type>java.lang.String[]</type>
    </attribute>
    <attribute>
      <description><![CDATA[the inline CSS style for this element]]></description>
      <name>inlineStyle</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[the CSS style class of the bean.]]></description>
      <name>styleClass</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[the proposed width of this frame
              This can be in pixels or percentage. This attribute is used only if this
              frame is a left/right facet of a frameBorderLayout component.]]></description>
      <name>width</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[the width of the frame margin. The value must be greater than zero (pixels).]]></description>
      <name>marginHeight</name>
      <type>int</type>
    </attribute>
    <attribute>
      <description><![CDATA[the short description of the bean.  This text
         is commonly used by user agents to display tooltip help text.]]></description>
      <name>shortDesc</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component.]]></description>
      <name>rendered</name>
      <type>boolean</type>
    </attribute>
    <attribute>
      <description><![CDATA[<html>the identifier for the component.  Every component may be named by a component identifier that must conform to the following rules:
<ul>
<li>They must start with a letter (as defined by the Character.isLetter() method) or underscore ( _ ).</li>
<li>Subsequent characters must be letters (as defined by the Character.isLetter() method), digits as defined by the Character.isDigit() method, 
dashes ( - ), or underscores ( _ ).  To minimize the size of responses generated by JavaServer Faces, it is recommended that component identifiers 
be as short as possible. If a component has been given an identifier, it must be unique in the namespace of the closest ancestor to that component 
that is a NamingContainer (if any).</li>
</ul></html>]]></description>
      <name>id</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[the proposed height of this frame.
              This can be in pixels or percentage. This attribute is used only if this
              frame is a top/bottom facet of a frameBorderLayout component.]]></description>
      <name>height</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[<html> This attribute specifies a link to a long description of the
             frame. This description should supplement the short description
             provided using the <code>shortDesc</code> attribute, and
             may be particularly useful for non-visual user agents.</html>]]></description>
      <name>longDescURL</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[the URI for the source of this frame]]></description>
      <name>source</name>
    <required>true</required>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[<html> whether or not scrollbars are available on this
              frame. Valid values for this attribute are the following
              constants:<br/>


     "yes" specifies that scrollbars are always available. <br/>
     "no" specifies that scrollbars are never available. <br/>
     "auto" specifies that the browser determines whether to display scroll
              bars based on the size of the frame and its content. If
              you do not specify a value for scrolling, the default
              value is "auto"</html>]]></description>
      <name>scrolling</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[the name used to identify this frame]]></description>
      <name>name</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.]]></description>
      <name>binding</name>
      <type>javax.faces.component.UIComponent</type>
    </attribute>
    <attribute>
      <description><![CDATA[the width of the frame margin. The value must be greater than zero (pixels).]]></description>
      <name>marginWidth</name>
      <type>int</type>
    </attribute>
  </tag>
  <tag>
    <description><![CDATA[frameBorderLayout is a layout bean which can be used to place seven
          frames at left, right, top, bottom, innerLeft, innerRight and center
          positions.]]></description>
    <tag-name>frameBorderLayout</tag-name>
    <component>
      <component-type>org.apache.myfaces.trinidad.HtmlFrameBorderLayout</component-type>
      <renderer-type>org.apache.myfaces.trinidad.FrameBorderLayout</renderer-type>
      <handler-class>org.apache.myfaces.trinidadinternal.facelets.TrinidadComponentHandler</handler-class>
    </component>
    <attribute>
      <description><![CDATA[a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.]]></description>
      <name>attributeChangeListener</name>
      <method-signature>void myMethod(org.apache.myfaces.trinidad.event.AttributeChangeEvent)</method-signature>
    </attribute>
    <attribute>
      <description><![CDATA[the IDs of the components that should trigger a partial update.
         This component will listen on the trigger components. If one of the
         trigger components receives an event that will cause it to update
         in some way, this component will request to be updated too.]]></description>
      <name>partialTriggers</name>
      <type>java.lang.String[]</type>
    </attribute>
    <attribute>
      <description><![CDATA[The size of frame spacing to be rendered.]]></description>
      <name>frameSpacing</name>
      <type>int</type>
    </attribute>
    <attribute>
      <description><![CDATA[the inline CSS style for this element]]></description>
      <name>inlineStyle</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[an onunload Javascript handler.]]></description>
      <name>onunload</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[The proposed width of this frameBorderLayout.  This can be in
           pixels or percentage. This attribute is used only if this a nested
           frameBorderLayout in a left/right facet of a
           frameBorderLayout.]]></description>
      <name>width</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[the CSS style class of the bean.]]></description>
      <name>styleClass</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[the short description of the bean.  This text
         is commonly used by user agents to display tooltip help text.]]></description>
      <name>shortDesc</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component.]]></description>
      <name>rendered</name>
      <type>boolean</type>
    </attribute>
    <attribute>
      <description><![CDATA[<html>the identifier for the component.  Every component may be named by a component identifier that must conform to the following rules:
<ul>
<li>They must start with a letter (as defined by the Character.isLetter() method) or underscore ( _ ).</li>
<li>Subsequent characters must be letters (as defined by the Character.isLetter() method), digits as defined by the Character.isDigit() method, 
dashes ( - ), or underscores ( _ ).  To minimize the size of responses generated by JavaServer Faces, it is recommended that component identifiers 
be as short as possible. If a component has been given an identifier, it must be unique in the namespace of the closest ancestor to that component 
that is a NamingContainer (if any).</li>
</ul></html>]]></description>
      <name>id</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[The proposed height of this frameBorderLayout.  This can be in
           pixels or percentage. This attribute is used only if this a nested
           frameBorderLayout in a top/bottom facet of a
           frameBorderLayout.]]></description>
      <name>height</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[an onload Javascript handler.]]></description>
      <name>onload</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[The size for the border width to be rendered.]]></description>
      <name>borderWidth</name>
      <type>int</type>
    </attribute>
    <attribute>
      <description><![CDATA[The size for the frame border width to be rendered.]]></description>
      <name>frameBorderWidth</name>
      <type>int</type>
    </attribute>
    <attribute>
      <description><![CDATA[an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.]]></description>
      <name>binding</name>
      <type>javax.faces.component.UIComponent</type>
    </attribute>
  </tag>
  <tag>
    <description><![CDATA[Tag for the HTML head element.]]></description>
    <tag-name>head</tag-name>
    <component>
      <component-type>org.apache.myfaces.trinidad.HtmlHead</component-type>
      <renderer-type>org.apache.myfaces.trinidad.Head</renderer-type>
      <handler-class>org.apache.myfaces.trinidadinternal.facelets.TrinidadComponentHandler</handler-class>
    </component>
    <attribute>
      <description><![CDATA[a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.]]></description>
      <name>attributeChangeListener</name>
      <method-signature>void myMethod(org.apache.myfaces.trinidad.event.AttributeChangeEvent)</method-signature>
    </attribute>
    <attribute>
      <description><![CDATA[<html>the identifier for the component.  Every component may be named by a component identifier that must conform to the following rules:
<ul>
<li>They must start with a letter (as defined by the Character.isLetter() method) or underscore ( _ ).</li>
<li>Subsequent characters must be letters (as defined by the Character.isLetter() method), digits as defined by the Character.isDigit() method, 
dashes ( - ), or underscores ( _ ).  To minimize the size of responses generated by JavaServer Faces, it is recommended that component identifiers 
be as short as possible. If a component has been given an identifier, it must be unique in the namespace of the closest ancestor to that component 
that is a NamingContainer (if any).</li>
</ul></html>]]></description>
      <name>id</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[The title of the document.  (This title doesn't have to match the
            title on any contained panelPage.)]]></description>
      <name>title</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[the IDs of the components that should trigger a partial update.
         This component will listen on the trigger components. If one of the
         trigger components receives an event that will cause it to update
         in some way, this component will request to be updated too.]]></description>
      <name>partialTriggers</name>
      <type>java.lang.String[]</type>
    </attribute>
    <attribute>
      <description><![CDATA[an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.]]></description>
      <name>binding</name>
      <type>javax.faces.component.UIComponent</type>
    </attribute>
    <attribute>
      <description><![CDATA[whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component.]]></description>
      <name>rendered</name>
      <type>boolean</type>
    </attribute>
  </tag>
  <tag>
    <description><![CDATA[<html>
          The html tag generates the &lt;html&gt; element for an HTML page.</html>]]></description>
    <tag-name>html</tag-name>
    <component>
      <component-type>org.apache.myfaces.trinidad.HtmlHtml</component-type>
      <renderer-type>org.apache.myfaces.trinidad.Html</renderer-type>
      <handler-class>org.apache.myfaces.trinidadinternal.facelets.TrinidadComponentHandler</handler-class>
    </component>
    <attribute>
      <description><![CDATA[a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.]]></description>
      <name>attributeChangeListener</name>
      <method-signature>void myMethod(org.apache.myfaces.trinidad.event.AttributeChangeEvent)</method-signature>
    </attribute>
    <attribute>
      <description><![CDATA[<html>the identifier for the component.  Every component may be named by a component identifier that must conform to the following rules:
<ul>
<li>They must start with a letter (as defined by the Character.isLetter() method) or underscore ( _ ).</li>
<li>Subsequent characters must be letters (as defined by the Character.isLetter() method), digits as defined by the Character.isDigit() method, 
dashes ( - ), or underscores ( _ ).  To minimize the size of responses generated by JavaServer Faces, it is recommended that component identifiers 
be as short as possible. If a component has been given an identifier, it must be unique in the namespace of the closest ancestor to that component 
that is a NamingContainer (if any).</li>
</ul></html>]]></description>
      <name>id</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.]]></description>
      <name>binding</name>
      <type>javax.faces.component.UIComponent</type>
    </attribute>
    <attribute>
      <description><![CDATA[whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component.]]></description>
      <name>rendered</name>
      <type>boolean</type>
    </attribute>
    <attribute>
      <description><![CDATA[Set if the page should render in default standards mode, quirks mode, or strict mode.  Behavior of the modes are:<ul>
<li>"default": renders as transitional doctypes for both XHTML and HTML,
with <a href="http://developer.mozilla.org/en/docs/Gecko's_%22Almost_Standards%22_Mode">"almost standards"</a> rendering mode</li>
<li>"strict": renders as a strict doctype for both XHTML and HTML, also
in standards rendering mode</li>
<li>"quirks": renders HTML pages in quirks mode, and XHTML with
a transitional doctype, but standards mode  (there is no quirks mode for
XHTML).</li></ul>]]></description>
      <name>mode</name>
      <type>java.lang.String</type>
    </attribute>
  </tag>
  <tag>
    <description><![CDATA[The meta component supports generating an html meta tag for things like reloading the page or configuring viewport characteristics.  It is also important to note that a meta HTML tag cannot have an ID so the component ID will not be seen in the browser source.]]></description>
    <tag-name>meta</tag-name>
    <component>
      <component-type>org.apache.myfaces.trinidad.HtmlMeta</component-type>
      <renderer-type>org.apache.myfaces.trinidad.Meta</renderer-type>
      <handler-class>org.apache.myfaces.trinidadinternal.facelets.TrinidadComponentHandler</handler-class>
    </component>
    <attribute>
      <description><![CDATA[a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.]]></description>
      <name>attributeChangeListener</name>
      <method-signature>void myMethod(org.apache.myfaces.trinidad.event.AttributeChangeEvent)</method-signature>
    </attribute>
    <attribute>
      <description><![CDATA[<html>the identifier for the component.  Every component may be named by a component identifier that must conform to the following rules:
<ul>
<li>They must start with a letter (as defined by the Character.isLetter() method) or underscore ( _ ).</li>
<li>Subsequent characters must be letters (as defined by the Character.isLetter() method), digits as defined by the Character.isDigit() method, 
dashes ( - ), or underscores ( _ ).  To minimize the size of responses generated by JavaServer Faces, it is recommended that component identifiers 
be as short as possible. If a component has been given an identifier, it must be unique in the namespace of the closest ancestor to that component 
that is a NamingContainer (if any).</li>
</ul></html>]]></description>
      <name>id</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[the	content for the meta tag]]></description>
      <name>content</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[the	name or the http-equiv attribute for the meta tag (see the type attribute for further configuration)]]></description>
      <name>name</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.]]></description>
      <name>binding</name>
      <type>javax.faces.component.UIComponent</type>
    </attribute>
    <attribute>
      <description><![CDATA[whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component.]]></description>
      <name>rendered</name>
      <type>boolean</type>
    </attribute>
    <attribute>
      <description><![CDATA[<html>how the name attribute is used.  Options are:
              <ul><li>name - for "name" which is the most common use for meta tags
                </li><li>httpEquiv - for "http-equiv" which is the used in some legacy meta tags
                </li></ul>
              </html>]]></description>
      <name>type</name>
      <type>java.lang.String</type>
    </attribute>
  </tag>
  <tag>
    <description><![CDATA[RowLayout components can be used on their own, or to
          define a row of a tableLayout component.]]></description>
    <tag-name>rowLayout</tag-name>
    <component>
      <component-type>org.apache.myfaces.trinidad.HtmlRowLayout</component-type>
      <renderer-type>org.apache.myfaces.trinidad.RowLayout</renderer-type>
      <handler-class>org.apache.myfaces.trinidadinternal.facelets.TrinidadComponentHandler</handler-class>
    </component>
    <attribute>
      <description><![CDATA[a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.]]></description>
      <name>attributeChangeListener</name>
      <method-signature>void myMethod(org.apache.myfaces.trinidad.event.AttributeChangeEvent)</method-signature>
    </attribute>
    <attribute>
      <description><![CDATA[an onmousemove Javascript handler.]]></description>
      <name>onmousemove</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[the default horizontal alignment of cells in this row.
              The acceptable values are "center", "left", "right", "start", and "end".]]></description>
      <name>halign</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[the IDs of the components that should trigger a partial update.
         This component will listen on the trigger components. If one of the
         trigger components receives an event that will cause it to update
         in some way, this component will request to be updated too.]]></description>
      <name>partialTriggers</name>
      <type>java.lang.String[]</type>
    </attribute>
    <attribute>
      <description><![CDATA[an ondblclick Javascript handler.]]></description>
      <name>ondblclick</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[the inline CSS style for this element]]></description>
      <name>inlineStyle</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[an onmouseout Javascript handler.]]></description>
      <name>onmouseout</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[the CSS style class of the bean.]]></description>
      <name>styleClass</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[the preferred total width of the layout.
              This attribute is ignored when the row layout is inside
              of a table layout.]]></description>
      <name>width</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[an onkeyup Javascript handler.]]></description>
      <name>onkeyup</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[an onkeydown Javascript handler.]]></description>
      <name>onkeydown</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[an onkeypress Javascript handler.]]></description>
      <name>onkeypress</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[the short description of the bean.  This text
         is commonly used by user agents to display tooltip help text.]]></description>
      <name>shortDesc</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component.]]></description>
      <name>rendered</name>
      <type>boolean</type>
    </attribute>
    <attribute>
      <description><![CDATA[an onmouseover Javascript handler.]]></description>
      <name>onmouseover</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[<html>the identifier for the component.  Every component may be named by a component identifier that must conform to the following rules:
<ul>
<li>They must start with a letter (as defined by the Character.isLetter() method) or underscore ( _ ).</li>
<li>Subsequent characters must be letters (as defined by the Character.isLetter() method), digits as defined by the Character.isDigit() method, 
dashes ( - ), or underscores ( _ ).  To minimize the size of responses generated by JavaServer Faces, it is recommended that component identifiers 
be as short as possible. If a component has been given an identifier, it must be unique in the namespace of the closest ancestor to that component 
that is a NamingContainer (if any).</li>
</ul></html>]]></description>
      <name>id</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[an onmouseup Javascript handler.]]></description>
      <name>onmouseup</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.]]></description>
      <name>binding</name>
      <type>javax.faces.component.UIComponent</type>
    </attribute>
    <attribute>
      <description><![CDATA[an onclick Javascript handler.]]></description>
      <name>onclick</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[an onmousedown Javascript handler.]]></description>
      <name>onmousedown</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[the default vertical alignment of cells in this row.
              The acceptable values are "middle", "top", and "bottom".]]></description>
      <name>valign</name>
      <type>java.lang.String</type>
    </attribute>
  </tag>
  <tag>
    <description><![CDATA[The script component supports	importing libraries, and inline	scripts.]]></description>
    <tag-name>script</tag-name>
    <component>
      <component-type>org.apache.myfaces.trinidad.HtmlScript</component-type>
      <renderer-type>org.apache.myfaces.trinidad.Script</renderer-type>
      <handler-class>org.apache.myfaces.trinidadinternal.facelets.TrinidadComponentHandler</handler-class>
    </component>
    <attribute>
      <description><![CDATA[a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.]]></description>
      <name>attributeChangeListener</name>
      <method-signature>void myMethod(org.apache.myfaces.trinidad.event.AttributeChangeEvent)</method-signature>
    </attribute>
    <attribute>
      <description><![CDATA[<html>the identifier for the component.  Every component may be named by a component identifier that must conform to the following rules:
<ul>
<li>They must start with a letter (as defined by the Character.isLetter() method) or underscore ( _ ).</li>
<li>Subsequent characters must be letters (as defined by the Character.isLetter() method), digits as defined by the Character.isDigit() method, 
dashes ( - ), or underscores ( _ ).  To minimize the size of responses generated by JavaServer Faces, it is recommended that component identifiers 
be as short as possible. If a component has been given an identifier, it must be unique in the namespace of the closest ancestor to that component 
that is a NamingContainer (if any).</li>
</ul></html>]]></description>
      <name>id</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[the	inline script]]></description>
      <name>text</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[the	IDs of the components that should trigger a partial update.
	 This component	will listen on the trigger components. If one of the
	 trigger components receives an	event that will	cause it to update
	 in some way, this component will request to be	updated	too.]]></description>
      <name>partialTriggers</name>
      <type>java.lang.String[]</type>
    </attribute>
    <attribute>
      <description><![CDATA[if the script generates content
	    using document.write() or document.writeln(), set this to true.
	    It defaults	to false.]]></description>
      <name>generatesContent</name>
      <type>boolean</type>
    </attribute>
    <attribute>
      <description><![CDATA[the	URI of a script	library	to import.]]></description>
      <name>source</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.]]></description>
      <name>binding</name>
      <type>javax.faces.component.UIComponent</type>
    </attribute>
    <attribute>
      <description><![CDATA[whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component.]]></description>
      <name>rendered</name>
      <type>boolean</type>
    </attribute>
  </tag>
  <tag>
    <description><![CDATA[<html>
          A TableLayout is a thin wrapper around the HTML &lt;table&gt;
          element.  It contains a series of row layout elements.</html>]]></description>
    <tag-name>tableLayout</tag-name>
    <component>
      <component-type>org.apache.myfaces.trinidad.HtmlTableLayout</component-type>
      <renderer-type>org.apache.myfaces.trinidad.TableLayout</renderer-type>
      <handler-class>org.apache.myfaces.trinidadinternal.facelets.TrinidadComponentHandler</handler-class>
    </component>
    <attribute>
      <description><![CDATA[a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.]]></description>
      <name>attributeChangeListener</name>
      <method-signature>void myMethod(org.apache.myfaces.trinidad.event.AttributeChangeEvent)</method-signature>
    </attribute>
    <attribute>
      <description><![CDATA[The summary of the table's purpose and structure
             for user agents rendering to non-visual media. This attribute
             must be set if this element is being used to implement a data
             table (instead of a layout table).]]></description>
      <name>summary</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[an onmousemove Javascript handler.]]></description>
      <name>onmousemove</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[the horizontal alignment of the table.
              The acceptable values are "center", "left", "right", "start", and "end".]]></description>
      <name>halign</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[the IDs of the components that should trigger a partial update.
         This component will listen on the trigger components. If one of the
         trigger components receives an event that will cause it to update
         in some way, this component will request to be updated too.]]></description>
      <name>partialTriggers</name>
      <type>java.lang.String[]</type>
    </attribute>
    <attribute>
      <description><![CDATA[an ondblclick Javascript handler.]]></description>
      <name>ondblclick</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[the inline CSS style for this element]]></description>
      <name>inlineStyle</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[an onmouseout Javascript handler.]]></description>
      <name>onmouseout</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[the CSS style class of the bean.]]></description>
      <name>styleClass</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[the preferred total width of the layout.]]></description>
      <name>width</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[an onkeyup Javascript handler.]]></description>
      <name>onkeyup</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[the spacing between cells.]]></description>
      <name>cellSpacing</name>
      <type>int</type>
    </attribute>
    <attribute>
      <description><![CDATA[an onkeydown Javascript handler.]]></description>
      <name>onkeydown</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[an onkeypress Javascript handler.]]></description>
      <name>onkeypress</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[the short description of the bean.  This text
         is commonly used by user agents to display tooltip help text.]]></description>
      <name>shortDesc</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component.]]></description>
      <name>rendered</name>
      <type>boolean</type>
    </attribute>
    <attribute>
      <description><![CDATA[an onmouseover Javascript handler.]]></description>
      <name>onmouseover</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[the spacing within cells.]]></description>
      <name>cellPadding</name>
      <type>int</type>
    </attribute>
    <attribute>
      <description><![CDATA[<html>the identifier for the component.  Every component may be named by a component identifier that must conform to the following rules:
<ul>
<li>They must start with a letter (as defined by the Character.isLetter() method) or underscore ( _ ).</li>
<li>Subsequent characters must be letters (as defined by the Character.isLetter() method), digits as defined by the Character.isDigit() method, 
dashes ( - ), or underscores ( _ ).  To minimize the size of responses generated by JavaServer Faces, it is recommended that component identifiers 
be as short as possible. If a component has been given an identifier, it must be unique in the namespace of the closest ancestor to that component 
that is a NamingContainer (if any).</li>
</ul></html>]]></description>
      <name>id</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[the border width around each cell.]]></description>
      <name>borderWidth</name>
      <type>int</type>
    </attribute>
    <attribute>
      <description><![CDATA[an onmouseup Javascript handler.]]></description>
      <name>onmouseup</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.]]></description>
      <name>binding</name>
      <type>javax.faces.component.UIComponent</type>
    </attribute>
    <attribute>
      <description><![CDATA[an onclick Javascript handler.]]></description>
      <name>onclick</name>
      <type>java.lang.String</type>
    </attribute>
    <attribute>
      <description><![CDATA[an onmousedown Javascript handler.]]></description>
      <name>onmousedown</name>
      <type>java.lang.String</type>
    </attribute>
  </tag>
</facelet-taglib>