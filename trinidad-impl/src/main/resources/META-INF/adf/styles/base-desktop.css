/**
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

**/

/**
  base-desktop.xss defines all of the base styles for the Simple skins
**/

/** DO NOT CHANGE THE DOCUMENT VERSION FROM ${trinidad-version} 
<styleSheetDocument xmlns="http://myfaces.apache.org/uix/style"
                    documentVersion="${trinidad-version}"
                    version="2.0 {
                    **/

/**

  Please Note:  We are in the processing of reviewing the set of
  style classes/named styles that are exposed to customizers.  Thus,
  this style sheet document is temporarily divided into
  two sections.

  The first section contains style definitions that
  have been reviewed and have been determined to be suitable for
  use by customizers.

  The second section contains style definitions that are required
  by the Minimal or Simple Look And Feel implementations, but have
  not yet been reviewed - and thus could potentially be changed or
  moved back down into the MLAF/SLAF style sheets.

  Please keep this in mind when adding new style definitions.

**/


  /**

    Section 1: Publically supported styles.   The styles defined in
    this section have been reviewed and are considered suitable for use
    by customizers.

  **/

  /**
    Global font named styles
  **/

/** The default font family **/
.AFDefaultFontFamily:alias {
  font-family: Arial,Helvetica,Geneva,sans-serif;
}

/** The default font **/
.AFDefaultFont:alias {
  -tr-rule-ref: selector(".AFDefaultFontFamily:alias");
  font-size: 10pt;
  font-weight: normal;
}

/** The default bold font **/
.AFDefaultBoldFont:alias {
  -tr-rule-ref: selector(".AFDefaultFont:alias");
  font-weight: bold;
}


/** A very small font **/
.AFVerySmallFont:alias {
  -tr-rule-ref: selector(".AFDefaultFont:alias");
  font-size: -2pt;
  }

/** A small font **/
.AFSmallFont:alias {
  -tr-rule-ref: selector(".AFDefaultFont:alias");
  font-size: -1pt;
}

/** A medium font - just slightly bigger than default **/
.AFMediumFont:alias {
  -tr-rule-ref: selector(".AFDefaultFont:alias");
  font-size: +1pt;
}

/** A large font **/
.AFLargeFont:alias {
  -tr-rule-ref: selector(".AFDefaultFont:alias");
  font-size: +3pt;
  }

/** A very large font **/
.AFVeryLargeFont:alias {
  -tr-rule-ref: selector(".AFDefaultFont:alias");
  font-size: +6pt;
  }

  /**
    Global background color named styles
  **/

  /** AFDarkBackground defines the primary color in the
       core (green) color ramp. **/
.AFDarkBackground:alias {
  background-color: #669966;
}

  /** AFVeryDarkBackground is the darkest color in the
       core (green) color ramp. **/
  .AFVeryDarkBackground:alias {
    -tr-rule-ref: selector(".AFDarkBackground:alias");
    background-color: -#333333;
  }

  /** AFMediumBackground is the middle color in the
       core (green) color ramp. **/
  .AFMediumBackground:alias {
  
    -tr-rule-ref: selector(".AFDarkBackground:alias");
    background-color: +#333333;
  }

  /** AFLightBackground is the lightest color in the
       core (green) color ramp. **/
  .AFLightBackground:alias {
    -tr-rule-ref: selector(".AFDarkBackground:alias");
    background-color: +#666666;
  }

  /** AFDarkAccentBackground defines the primary color in the
       accent (grey) color ramp.  **/
  .AFDarkAccentBackground:alias {
    background-color: #CCCCCC;
  }

  /** AFVeryDarkAccentBackground is the darkest color in the accent (grey)
       color ramp. **/
  .AFVeryDarkAccentBackground:alias {
  
    -tr-rule-ref: selector(".AFDarkAccentBackground:alias");
    background-color: -#333333;
  }

  /** AFMediumAccentBackground is the middle color in the accent (grey)
       color ramp.  **/
  .AFMediumAccentBackground:alias {
    -tr-rule-ref: selector(".AFDarkAccentBackground:alias");
    background-color: +#333300;
  }

  /** AFLightAccentBackground is the lightest color in the accent (grey)
       color ramp. **/
  .AFLightAccentBackground:alias {
    -tr-rule-ref: selector(".AFDarkAccentBackground:alias");
    background-color: +#1D1C1C;
  }

  /** AFTextBackground is the (white) background color used for
       most text **/
  .AFTextBackground:alias {
    background-color: #ffffff;
  }

  /**
    Global foreground color named styles
  **/

  /** AFVeryDarkForeground is the darkest foreground color in the core (green)
       color ramp **/
  .AFVeryDarkForeground:alias {
    color: -tr-property-ref(".AFVeryDarkBackground:alias","background-color");
  }


  /** AFDarkForeground is the primary foreground color in the core (green)
       color ramp **/
  .AFDarkForeground:alias {
    color: -tr-property-ref(".AFDarkBackground:alias","background-color");
  }

  /** AFMediumForeground is the middle foreground color in the core (green)
       color ramp **/
  .AFMediumForeground:alias {
    color: -tr-property-ref(".AFMediumBackground:alias","background-color");
  }

  /** AFLightForeground is the lightest foreground color in the core (green)
       color ramp **/
  .AFLightForeground:alias {
     color: -tr-property-ref(".AFLightBackground:alias","background-color");
  }

  /** AFVeryDarkAccentForeground is the darkest foreground color in the
       accent (grey) color ramp **/
  .AFVeryDarkAccentForeground:alias {
     color: -tr-property-ref(".AFVeryDarkAccentBackground:alias","background-color");
  }

  /** AFDarkAccentForeground is the primary foreground color in the
       accent (grey) color ramp **/
  .AFDarkAccentForeground:alias {
     color: -tr-property-ref(".AFDarkAccentBackground:alias","background-color");
  }

  /** AFMediumAccentForeground is the middle foreground color in the
       accent (grey) color ramp **/
  .AFMediumAccentForeground:alias {
     color: -tr-property-ref(".AFMediumAccentBackground:alias","background-color");
  }

  /** AFLightAccentForeground is the lightest foreground color in the
       accent (grey) color ramp **/
  .AFLightAccentForeground:alias {
     color: -tr-property-ref(".AFLightAccentBackground:alias","background-color");
  }

  /** AFTextForeground is the (black) foreground color used for almost
       all text **/
  .AFTextForeground:alias {
    color: #000000;
  }


  /** AFSelectedTextForeground is the (white) foreground color used for
       "selected" text - text which is typically drawn on a dark
       background **/
  .AFSelectedTextForeground:alias {
     color: -tr-property-ref(".AFTextBackground:alias","background-color");
  }

  /** Style for error text **/
  .AFErrorTextForeground:alias {
    color: #cc0000;
  }

  /** Link colors **/
  .AFLinkForeground:alias {
     color: -tr-property-ref(".AFDarkBackground:alias","background-color");
    color: -#666633;
  }

  .AFActiveLinkForeground:alias {
    -tr-rule-ref: selector(".AFLinkForeground:alias");
    color: +#003333;
  }

  .AFVisitedLinkForeground:alias {
    -tr-rule-ref: selector(".AFLinkForeground:alias");
    color: +#333333;
  }

  .AFDisabledLinkForeground:alias {
    -tr-rule-ref: selector(".AFLinkForeground:alias");
    color: +#666666;
  }

  /**
    Border named sytles
  **/

  .AFDarkBorder:alias {
     border-color: -tr-property-ref(".AFDarkBackground:alias","background-color");
  }

  .AFVeryDarkBorder:alias {
     border-color: -tr-property-ref(".AFVeryDarkBackground:alias","background-color");
  }

  .AFMediumBorder:alias {
     border-color: -tr-property-ref(".AFMediumBackground:alias","background-color");
  }

  .AFLightBorder:alias {
     border-color: -tr-property-ref(".AFLightBackground:alias","background-color");
  }

  .AFDarkAccentBorder:alias {
     border-color: -tr-property-ref(".AFDarkAccentBackground:alias","background-color");
  }

  .AFVeryDarkAccentBorder:alias {
     border-color: -tr-property-ref(".AFVeryDarkAccentBackground:alias","background-color");
  }

  .AFMediumAccentBorder:alias {
     border-color: -tr-property-ref(".AFMediumAccentBackground:alias","background-color");
  }

  .AFLightAccentBorder:alias {
     border-color: -tr-property-ref(".AFLightAccentBackground:alias","background-color");
  }

  /**
    Alignment named styles
  **/

  .AFStartTextAlign:alias {
    text-align: left;
  }

  .AFEndTextAlign:alias {
    text-align: right;
  }

  .AFFloatStart:alias {
    float: left;
  }

  .AFFloatEnd:alias {
    float: right;
  }

  /** TODO New for Fusion Doc **/
  .AFEndPadding:alias {
  	padding: 0px 8px 0px 0px;
  }

  .AFStartPadding:alias {
  	padding: 0px 0px 0px 8px;
  }

  /** Additional named styles for alignment;  not strictly necessary,
       since these aren't actually ever overridden, but it
       does make alignment in our XSS more obvious **/
  .AFLeftTextAlign:alias {
    text-align: left;
  }

  .AFRightTextAlign:alias {
    text-align: right;
  }

  .AFCenterTextAlign:alias {
    text-align: center;
  }

  /**
    Global text style classes. These are available to the application
    developer to use on outputText and outputFormatted.
  **/
  .AFInstructionText {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    -tr-rule-ref: selector(".AFTextForeground:alias");
  }

  .AFInstructionTextDisabled {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    -tr-rule-ref: selector(".MediumExtraAccentForeground:alias");
  }

  .AFDataText {
    -tr-rule-ref: selector(".AFDefaultBoldFont:alias");
    -tr-rule-ref: selector(".AFTextForeground:alias");
  }

  .AFDataTextDisabled {
    -tr-rule-ref: selector(".AFDefaultBoldFont:alias");
    -tr-rule-ref: selector(".MediumExtraAccentForeground:alias");
  }

  .AFDataNumber {
    -tr-rule-ref: selector(".AFDefaultBoldFont:alias");
    -tr-rule-ref: selector(".AFTextForeground:alias");
    -tr-rule-ref: selector(".AFRightTextAlign:alias");
  }

  .AFDataNumberDisabled {
    -tr-rule-ref: selector(".AFDefaultBoldFont:alias");
    -tr-rule-ref: selector(".MediumExtraAccentForeground:alias");
    -tr-rule-ref: selector(".AFRightTextAlign:alias");
  }
  /** also used in our select components and the composites that use these,
       like shuttle and chooseDate. **/
  .AFFieldText {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    -tr-rule-ref: selector(".AFTextForeground:alias");
  }

  .AFFieldTextDisabled {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    -tr-rule-ref: selector(".MediumExtraAccentForeground:alias");
  }

  .AFFieldNumber {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    -tr-rule-ref: selector(".AFRightTextAlign:alias");
    -tr-rule-ref: selector(".AFTextForeground:alias");
  }

  .AFFieldNumberDisabled {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    -tr-rule-ref: selector(".AFRightTextAlign:alias");
    -tr-rule-ref: selector(".MediumExtraAccentForeground:alias");
  }

  /** TODO Doc changes:
  .AFLabelText -
    if you skinned this, rename to .AFLabel:alias
    or include .AFLabelText in .AFLabel:alias
  .AFLabelCell -
    if you skinned this, put these changes in .AFLabel:alias or include
    .AFLabelCell in .AFLabel:alias
  **/
  /** until I sync up server-side components, use this **/
  /** TODO get rid of this when server-side components have the same styles! **/
  .AFLabelText {
    -tr-rule-ref: selector(".AFLabel:alias");
  }
  .AFLabelCell {
    -tr-rule-ref: selector(".AFEndPadding:alias");
  }

  /** This allows server-side labels to have the same color **/
  .AFLabelTextForeground:alias {
    -tr-rule-ref: selector(".AFTextForeground:alias");
  }
  .AFLabelTextForegroundDisabled:alias {
    -tr-rule-ref: selector(".AFTextForeground:alias");
  }

  .AFLabel:alias {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    -tr-rule-ref: selector(".AFEndTextAlign:alias");
    -tr-rule-ref: selector(".AFLabelTextForeground:alias");
    font-weight: normal;
    -tr-rule-ref: selector(".AFEndPadding:alias");
  }

  /** This is a convenience for people that want all disabled labels to look the same **/

  .AFLabelDisabled:alias {
    -tr-rule-ref: selector(".AFLabelTextForegroundDisabled:alias");
  }

  /**
    Global Icon Styles
  **/
  .AFErrorIconStyle{
    -tr-rule-ref: selector(".AFErrorTextForeground:alias");
    font-family: monospace;
    font-weight: bold;
  }

  .AFInfoIconStyle {
    -tr-rule-ref: selector(".AFDarkForeground:alias");
    font-family: monospace;
    font-weight: bold;
  }

  .AFWarningIconStyle {
    -tr-rule-ref: selector(".AFDarkForeground:alias");
    font-family: monospace;
    font-weight: bold;
  }

  .AFRequiredIconStyle {
    -tr-rule-ref: selector(".AFDarkForeground:alias");
    /** This style is only applied to the required icon ('*'),
         so we don't have to worry about picking a font that
         can be used for non-English text **/
    font-family: Courier,sans-serif;
  }

  .AFQuickSelectIconStyle {
    -tr-rule-ref: selector(".AFDarkForeground:alias");
    font-family: monospace;
    font-weight: bold;
  }


  .AFQuickSelectDisabledIconStyle{
    -tr-rule-ref: selector(".MediumExtraAccentForeground:alias");
    font-family: monospace;
    font-weight: bold;
  }

  /**
     Global Link Styles

     Note: Keep these near the top so that .OraLink gets a
     2 character alias.
  **/

  .OraLink:link {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    -tr-rule-ref: selector(".AFLinkForeground:alias");
  }

  .OraLink:active {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    -tr-rule-ref: selector(".AFActiveLinkForeground:alias");
  }

  .OraLink:visited {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    -tr-rule-ref: selector(".AFVisitedLinkForeground:alias");
  }

  .OraLinkDisabled {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
  }


  af|outputText {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    -tr-rule-ref: selector(".AFTextForeground:alias");
  }


  af|outputFormatted {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    -tr-rule-ref: selector(".AFTextForeground:alias");
  }

  /** outputDocument selectors **/
  /** TODO: Document those selectors **/

  af|outputDocument {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    -tr-rule-ref: selector(".AFTextForeground:alias");
  }

  af|outputDocument::title {
    -tr-rule-ref: selector(".AFLargeFont:alias");
    -tr-rule-ref: selector(".AFHeaderText:alias");
    padding: 0px;
    margin: 0px;
  }

  af|outputDocument::paragraph {
    text-align: justify;
    padding: 0px;
    margin: 0px;
  }

  af|outputDocument::separator {
    text-align: center;
    padding: 0px;
    margin: 0px;
  }

  /** form control styles **/
  af|outputLabel {
    -tr-rule-ref: selector(".AFLabel:alias");
  }
  af|inputChoice::label {
    -tr-rule-ref: selector(".AFLabel:alias");
  }
  af|inputFile::label {
    -tr-rule-ref: selector(".AFLabel:alias");
  }
  af|inputNumberSpinbox::label {
    -tr-rule-ref: selector(".AFLabel:alias");
  }
  af|inputText::label {
    -tr-rule-ref: selector(".AFLabel:alias");
  }
  af|selectBooleanCheckbox::label {
    -tr-rule-ref: selector(".AFLabel:alias");
  }
  af|selectBooleanRadio::label {
    -tr-rule-ref: selector(".AFLabel:alias");
  }
  af|inputColor::label {
    -tr-rule-ref: selector(".AFLabel:alias");
  }
  af|inputDate::label {
    -tr-rule-ref: selector(".AFLabel:alias");
  }
  af|inputListOfValues::label {
    -tr-rule-ref: selector(".AFLabel:alias");
  }
  af|selectManyCheckbox::label {
    -tr-rule-ref: selector(".AFLabel:alias");
  }
  af|selectManyListbox::label {
    -tr-rule-ref: selector(".AFLabel:alias");
  }
  af|selectOneChoice::label {
    -tr-rule-ref: selector(".AFLabel:alias");
  }
  af|selectOneListbox::label {
    -tr-rule-ref: selector(".AFLabel:alias");
  }
  af|selectOneRadio::label {
    -tr-rule-ref: selector(".AFLabel:alias");
  }
  af|panelLabelAndMessage::label {
    -tr-rule-ref: selector(".AFLabel:alias");
  }

  af|panelTip {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    -tr-rule-ref: selector(".AFDarkForeground:alias");
  }

  af|panelTip::label {
    -tr-rule-ref: selector(".AFDefaultBoldFont:alias");
  }

  af|panelTip::content {
  }

  af|panelFormLayout {}

  af|panelGroupLayout {}

  af|panelAccordion {}
  af|panelAccordion::content {}
  af|panelAccordion::header-collapsed {}
  af|panelAccordion::header-disabled {}
  af|panelAccordion::header-expanded {}
  af|panelAccordion::title-disabled-link {}
  af|panelAccordion::title-link {}
  af|panelAccordion::toolbar {
    -tr-rule-ref: selector(".AFFloatEnd:alias");
  }

  af|separator {}

  /** Required label selectors **/

  /** Main required label alias **/
  .AFRequiredLabel:alias {
  }

  /**
    Lighweight Dialog Styles
  **/

  af|dialog::container {
    -tr-rule-ref: selector(".AFVeryDarkBorder:alias");
    border: 1px solid;
    background-color: white;
  }

  af|dialog::title-bar {
    -tr-rule-ref: selector(".AFDarkAccentBackground:alias");
    -tr-rule-ref: selector(".AFVeryDarkBorder:alias");
    border-bottom: 1px solid;
    padding: 2px 2px 2px 2px;
  }

  af|dialog::title-text {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    -tr-rule-ref: selector(".AFMediumFont:alias");
    white-space: nowrap;
    overflow: hidden;
  }
  /** The following selector should have been called ::close-icon-style, since it is a style,
  not an Icon. It's too late to change since it is public. **/
  af|dialog::close-icon {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    -tr-rule-ref: selector(".AFMediumFont:alias");
    margin-left: 5px;
    background-image: url('/adf/images/close.gif');
    background-position: center;
    background-repeat: no-repeat;
    height: 13px;
    width: 13px;
  }

  af|dialog::content {
    -tr-rule-ref: selector(".AFLightAccentBackground:alias");
    border: 0px;
  }

  /** Per component selectors **/
  af|inputColor:required::label { 
    -tr-rule-ref: selector(".AFRequiredLabel:alias");
  }
  af|inputDate:required::label {
    -tr-rule-ref: selector(".AFRequiredLabel:alias");
  }
  af|inputFile:required::label {
    -tr-rule-ref: selector(".AFRequiredLabel:alias");
  }
  af|inputListOfValues:required::label {
    -tr-rule-ref: selector(".AFRequiredLabel:alias");
  }
  af|inputNumberSpinbox:required::label {
    -tr-rule-ref: selector(".AFRequiredLabel:alias");
  }
  af|inputText:required::label {
    -tr-rule-ref: selector(".AFRequiredLabel:alias");
  }
  af|selectBooleanCheckbox:required::label {
    -tr-rule-ref: selector(".AFRequiredLabel:alias");
  }
  af|selectBooleanRadio:required::label {
    -tr-rule-ref: selector(".AFRequiredLabel:alias");
  }
  af|selectManyCheckbox:required::label {
    -tr-rule-ref: selector(".AFRequiredLabel:alias");
  }
  af|selectManyListbox:required::label {
    -tr-rule-ref: selector(".AFRequiredLabel:alias");
  }
  af|selectOneChoice:required::label {
    -tr-rule-ref: selector(".AFRequiredLabel:alias");
  }
  af|selectOneListbox:required::label {
    -tr-rule-ref: selector(".AFRequiredLabel:alias");
  }
  af|selectOneRadio:required::label {
    -tr-rule-ref: selector(".AFRequiredLabel:alias");
  }

  af|inputChoice:disabled::label {
    -tr-rule-ref: selector(".AFLabelDisabled:alias");
  }
  af|inputNumberSpinbox:disabled::label {
    -tr-rule-ref: selector(".AFLabelDisabled:alias");
  }
  af|inputText:disabled::label {
    -tr-rule-ref: selector(".AFLabelDisabled:alias");
  }
  af|selectBooleanCheckbox:disabled::label {
    -tr-rule-ref: selector(".AFLabelDisabled:alias");
  }
  af|selectBooleanRadio:disabled::label {
    -tr-rule-ref: selector(".AFLabelDisabled:alias");
  }
  af|inputColor:disabled::label {
    -tr-rule-ref: selector(".AFLabelDisabled:alias");
  }
  af|inputDate:disabled::label {
    -tr-rule-ref: selector(".AFLabelDisabled:alias");
  }
  af|inputListOfValues:disabled::label {
    -tr-rule-ref: selector(".AFLabelDisabled:alias");
  }
  af|selectManyCheckbox:disabled::label {
    -tr-rule-ref: selector(".AFLabelDisabled:alias");
  }
  af|selectManyListbox:disabled::label {
    -tr-rule-ref: selector(".AFLabelDisabled:alias");
  }
  af|selectOneChoice:disabled::label {
    -tr-rule-ref: selector(".AFLabelDisabled:alias");
  }
  af|selectOneListbox:disabled::label {
    -tr-rule-ref: selector(".AFLabelDisabled:alias");
  }
  af|selectOneRadio:disabled::label {
    -tr-rule-ref: selector(".AFLabelDisabled:alias");
  }

  af|inputChoice::content {
    -tr-rule-ref: selector(".AFFormControlContent:alias");
  }
  af|inputChoice::content-input {
    -tr-rule-ref: selector("af|inputChoice::content");
  }
  af|inputText::content {
    -tr-rule-ref: selector(".AFFormControlContent:alias");
  }
  af|inputNumberSpinbox::content {
    -tr-rule-ref: selector(".AFFormControlContent:alias");
  }
  af|inputNumberSpinbox::increment-cell {
    -tr-rule-ref: selector(".AFLightAccentBackground:alias");
    -tr-rule-ref: selector(".AFVeryDarkAccentBorder:alias");
    border-width: 1px;
    border-style: solid;
    width: 11px;
    height: 8px;
  }
  af|inputNumberSpinbox::decrement-cell {
    -tr-rule-ref: selector(".AFLightAccentBackground:alias");
    -tr-rule-ref: selector(".AFVeryDarkAccentBorder:alias");
    border-width: 1px;
    border-style: solid;
    width: 11px;
    height: 8px;
  }
  af|inputNumberSpinbox::spinbox-cell {
    padding-left: 1px;
  }
  af|inputText::content {
    -tr-rule-ref: selector(".AFFormControlContent:alias");
  }
  af|inputColor::content {
    -tr-rule-ref: selector(".AFFormControlContent:alias");
  }
  af|inputDate::content {
    -tr-rule-ref: selector(".AFFormControlContent:alias");
  }
  af|inputListOfValues::content {
    -tr-rule-ref: selector(".AFFormControlContent:alias");
  }
  af|selectBooleanRadio::content {
    -tr-rule-ref: selector(".AFFormControlContent:alias");
  }
  af|selectBooleanCheckbox::content {
    -tr-rule-ref: selector(".AFFormControlContent:alias");
  }
  af|selectManyCheckbox::content {
    -tr-rule-ref: selector(".AFFormControlContent:alias");
  }
  af|selectManyListbox::content {
    -tr-rule-ref: selector(".AFFormControlContent:alias");
  }
  af|selectOneChoice::content {
    -tr-rule-ref: selector(".AFFormControlContent:alias");
  }
  af|selectOneListbox::content {
    -tr-rule-ref: selector(".AFFormControlContent:alias");
  }
  af|selectOneRadio::content {
    -tr-rule-ref: selector(".AFFormControlContent:alias");
  }

  /** Required content selectors **/

  /** Main required content alias **/
  .AFRequiredContent:alias {
  }

  /** Per component selectors **/
  af|inputColor:required::content {
    -tr-rule-ref: selector(".AFRequiredContent:alias");
  }
  af|inputDate:required::content {
    -tr-rule-ref: selector(".AFRequiredContent:alias");
  }
  af|inputFile:required::content {
    -tr-rule-ref: selector(".AFRequiredContent:alias");
  }
  af|inputListOfValues:required::content {
    -tr-rule-ref: selector(".AFRequiredContent:alias");
  }
  af|inputNumberSpinbox:required::content {
    -tr-rule-ref: selector(".AFRequiredContent:alias");
  }
  af|inputText:required::content {
    -tr-rule-ref: selector(".AFRequiredContent:alias");
  }
  af|selectBooleanCheckbox:required::content {
    -tr-rule-ref: selector(".AFRequiredContent:alias");
  }
  af|selectBooleanRadio:required::content {
    -tr-rule-ref: selector(".AFRequiredContent:alias");
  }
  af|selectManyCheckbox:required::content {
    -tr-rule-ref: selector(".AFRequiredContent:alias");
  }
  af|selectManyListbox:required::content {
    -tr-rule-ref: selector(".AFRequiredContent:alias");
  }
  af|selectOneChoice:required::content {
    -tr-rule-ref: selector(".AFRequiredContent:alias");
  }
  af|selectOneListbox:required::content {
    -tr-rule-ref: selector(".AFRequiredContent:alias");
  }
  af|selectOneRadio:required::content {
    -tr-rule-ref: selector(".AFRequiredContent:alias");
  }

  /** place-holder. No need to style this for base **/
  af|selectOneRadio::item-text {
  }
  af|selectManyCheckbox::item-text {
  }

  /** inputText's marker style classes that will style the content piece **/
  /** when the user says styleClass="AFFieldNumberMarker", for example **/
  af|inputText.AFFieldTextMarker::content {
    -tr-rule-ref: selector(".AFFieldText");
  }
  af|inputText:disabled.AFFieldTextMarker::content {
    -tr-rule-ref: selector(".AFFieldText");
  }
  af|inputText.AFFieldNumberMarker::content {
    -tr-rule-ref: selector(".AFFieldNumber");
  }
  af|inputText:disabled.AFFieldNumberMarker::content {
    -tr-rule-ref: selector(".AFFieldNumberDisabled");
  }
  af|inputText.AFFieldTextLTRMarker::content {
    -tr-rule-ref: selector(".AFFieldTextLTR");
  }
  af|inputText:disabled.AFFieldTextLTRMarker::content {
    -tr-rule-ref: selector(".AFFieldTextLTRDisabled");
  }
  af|inputText.AFPhoneFieldTextMarker::content {
    -tr-rule-ref: selector(".AFPhoneFieldText");
  }
  af|inputText:disabled.AFPhoneFieldTextMarker::content {
    -tr-rule-ref: selector(".AFPhoneFieldTextDisabled");
  }
  af|inputText.AFPostalCodeFieldTextMarker::content {
    -tr-rule-ref: selector(".AFPostalCodeFieldText");
  }
  af|inputText:disabled.AFPostalCodeFieldTextMarker::content {
    -tr-rule-ref: selector(".AFPostalCodeFieldTextDisabled");
  }
  af|inputText.AFAddressFieldTextMarker::content {
    -tr-rule-ref: selector(".AFAddressFieldText");
  }
  af|inputText:disabled.AFAddressFieldTextMarker::content {
    -tr-rule-ref: selector(".AFAddressFieldTextDisabled");
  }
  /** inputChoices's marker style classes that will style the content piece **/
  /** when the user says styleClass="AFFieldNumberMarker", for example **/
  af|inputChoice.AFFieldTextMarker::content-input {
    -tr-rule-ref: selector(".AFFieldText");
  }
  af|inputChoice:disabled.AFFieldTextMarker::content-input {
    -tr-rule-ref: selector(".AFFieldText");
  }
  af|inputChoice.AFFieldNumberMarker::content-input {
    -tr-rule-ref: selector(".AFFieldNumber");
  }
  af|inputChoice:disabled.AFFieldNumberMarker::content-input {
    -tr-rule-ref: selector(".AFFieldNumberDisabled");
  }
  af|inputChoice.AFFieldTextLTRMarker::content-input {
    -tr-rule-ref: selector(".AFFieldTextLTR");
  }
  af|inputChoice:disabled.AFFieldTextLTRMarker::content-input {
    -tr-rule-ref: selector(".AFFieldTextLTRDisabled");
  }
  af|inputChoice.AFPhoneFieldTextMarker::content-input {
    -tr-rule-ref: selector(".AFPhoneFieldText");
  }
  af|inputChoice:disabled.AFPhoneFieldTextMarker::content-input {
    -tr-rule-ref: selector(".AFPhoneFieldTextDisabled");
  }
  af|inputChoice.AFPostalCodeFieldTextMarker::content-input {
    -tr-rule-ref: selector(".AFPostalCodeFieldText");
  }
  af|inputChoice:disabled.AFPostalCodeFieldTextMarker::content-input {
    -tr-rule-ref: selector(".AFPostalCodeFieldTextDisabled");
  }
  af|inputChoice.AFAddressFieldTextMarker::content-input {
    -tr-rule-ref: selector(".AFAddressFieldText");
  }
  af|inputChoice:disabled.AFAddressFieldTextMarker::content-input {
    -tr-rule-ref: selector(".AFAddressFieldTextDisabled");
  }
  /** inputNumberSpinbox's marker style classes that will style the content piece **/
  /** when the user says styleClass="AFFieldNumberMarker", for example **/
  af|inputNumberSpinbox.AFFieldTextMarker::content {
    -tr-rule-ref: selector(".AFFieldText");
  }
  af|inputNumberSpinbox:disabled.AFFieldTextMarker::content {
    -tr-rule-ref: selector(".AFFieldText");
  }
  af|inputNumberSpinbox.AFFieldNumberMarker::content {
    -tr-rule-ref: selector(".AFFieldNumber");
  }
  af|inputNumberSpinbox:disabled.AFFieldNumberMarker::content {
    -tr-rule-ref: selector(".AFFieldNumberDisabled");
  }
  af|inputNumberSpinbox.AFFieldTextLTRMarker::content {
    -tr-rule-ref: selector(".AFFieldTextLTR");
  }
  af|inputNumberSpinbox:disabled.AFFieldTextLTRMarker::content {
    -tr-rule-ref: selector(".AFFieldTextLTRDisabled");
  }

/** use this to style all required icons the same **/
/** .AFRequiredIconStyle:alias This is NOT the same as the selector
.AFRequiredIconStyle that we have in server-side components. That is a selector, this is an alias **/
  .AFRequiredIconStyle:alias {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
  }

  /** required icon **/
  af|outputLabel::required-icon-style {
    -tr-rule-ref: selector(".AFRequiredIconStyle:alias");
  }
  af|inputChoice::required-icon-style {
    -tr-rule-ref: selector(".AFRequiredIconStyle:alias");
  }
  af|inputNumberSpinbox::required-icon-style {
    -tr-rule-ref: selector(".AFRequiredIconStyle:alias");
  }
  af|inputText::required-icon-style {
    -tr-rule-ref: selector(".AFRequiredIconStyle:alias");
  }
  af|selectBooleanCheckbox::required-icon-style {
    -tr-rule-ref: selector(".AFRequiredIconStyle:alias");
  }
  af|selectBooleanRadio::required-icon-style {
    -tr-rule-ref: selector(".AFRequiredIconStyle:alias");
  }
  af|inputDate::required-icon-style {
    -tr-rule-ref: selector(".AFRequiredIconStyle:alias");
  }
  af|selectManyCheckbox::required-icon-style {
    -tr-rule-ref: selector(".AFRequiredIconStyle:alias");
  }
  af|selectManyListbox::required-icon-style {
    -tr-rule-ref: selector(".AFRequiredIconStyle:alias");
  }
  af|selectOneChoice::required-icon-style {
    -tr-rule-ref: selector(".AFRequiredIconStyle:alias");
  }
  af|selectOneListbox::required-icon-style {
    -tr-rule-ref: selector(".AFRequiredIconStyle:alias");
  }
  af|selectOneRadio::required-icon-style {
    -tr-rule-ref: selector(".AFRequiredIconStyle:alias");
  }

  /** required group icon. TODO Doc only when we have the requiredGroup attribute **/
  .AFRequiredGroupIconStyle:alias {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
  }

  af|outputLabel::group-icon-style {
    -tr-rule-ref: selector(".AFRequiredGroupIconStyle:alias");
  }
  af|inputChoice::group-icon-style {
    -tr-rule-ref: selector(".AFRequiredGroupIconStyle:alias");
  }
  af|inputNumberSpinbox::group-icon-style {
    -tr-rule-ref: selector(".AFRequiredGroupIconStyle:alias");
  }
  af|inputText::group-icon-style {
    -tr-rule-ref: selector(".AFRequiredGroupIconStyle:alias");
  }
  af|selectBooleanCheckbox::group-icon-style {
    -tr-rule-ref: selector(".AFRequiredGroupIconStyle:alias");
  }
  af|selectBooleanRadio::group-icon-style {
    -tr-rule-ref: selector(".AFRequiredGroupIconStyle:alias");
  }
  af|inputDate::group-icon-style {
    -tr-rule-ref: selector(".AFRequiredGroupIconStyle:alias");
  }
  af|selectManyCheckbox::group-icon-style {
    -tr-rule-ref: selector(".AFRequiredGroupIconStyle:alias");
  }
  af|selectManyListbox::group-icon-style {
    -tr-rule-ref: selector(".AFRequiredGroupIconStyle:alias");
  }
  af|selectOneChoice::group-icon-style {
    -tr-rule-ref: selector(".AFRequiredGroupIconStyle:alias");
  }
  af|selectOneListbox::group-icon-style {
    -tr-rule-ref: selector(".AFRequiredGroupIconStyle:alias");
  }
  af|selectOneRadio::group-icon-style {
    -tr-rule-ref: selector(".AFRequiredGroupIconStyle:alias");
  }
  /** menuList styles
  **/
  af|menuList::selected {
    -tr-rule-ref: selector(".AFDefaultBoldFont:alias");
    -tr-rule-ref: selector(".AFLightBackground:alias");
  }

  af|menuList {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
  }

  /**
    tr:menuChoice Styles
  **/

  af|menuChoice::label {
    -tr-rule-ref: selector(".AFVerySmallFont:alias");
  }

  /**
    Body Styles
  **/

  BODY {
    -tr-rule-ref: selector(".AFTextBackground:alias");
    -tr-rule-ref: selector(".AFDefaultFontFamily:alias");
  }

  /** form controls **/
  /** alias for the content of the form controls **/
  /** 10.1.3 uses AFFieldText, so this is a good way to keep old skins working **/
  /** otherwise I could include the same styles that AFFieldText includes **/
  .AFFormControlContent:alias {
    -tr-rule-ref: selector(".AFFieldText");
  }


  /** menuPath alias names **/
  /** use the alias names  when you want to customize **/
  /** one style and affect more than one **/
  /** e.g., both af|menuPath and af|treeTable::path include the **/
  /** AFPath style **/
  /** this way if you want to change the style for af|menuPath and **/
  /** af|treeTable::path to the same, the most convenient way **/
  /** is to change the AFPath **/
  .AFPath:alias {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    -tr-rule-ref: selector(".AFLinkForeground:alias");
  }

  .AFPathStep:alias {
    -tr-rule-ref: selector(".AFLinkForeground:alias");
    font-size: -tr-property-ref(".SmallLinkFont:alias");
  }

  .AFPathSelectedStep:alias {
    -tr-rule-ref: selector(".AFTextForeground:alias");
  }


  /**
    tr:treeTable menuPath  styles
  **/
  af|treeTable::path {
    -tr-rule-ref: selector(".AFPath:alias");
  }

  af|treeTable::path-step {
    -tr-rule-ref: selector(".AFPathStep:alias");
  }

  af|treeTable::path-selected-step {
    -tr-rule-ref: selector(".AFPathStep:alias");
    -tr-rule-ref: selector(".AFPathSelectedStep:alias");
  }

  /**
    tr:menuPath Styles
    @todo What calls MenuPathRenderer?
  **/

  af|menuPath {
    -tr-rule-ref: selector(".AFPath:alias");
  }

  af|menuPath::step {
    -tr-rule-ref: selector(".AFPathStep:alias");
  }

  af|menuPath::selected-step {
    -tr-rule-ref: selector(".AFPathSelectedStep:alias");
    -tr-rule-ref: selector("af|menuPath::step");
  }

  /**
    tr:panelList Styles
  **/
  /**style selector=".OraBulletedList A {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    -tr-rule-ref: selector(".AFLinkForeground:alias");
  }

  .OraBulletedList UL {
    margin-top: 4px;
    margin-bottom: 4px;
  </style**/

  af|panelList::link {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    -tr-rule-ref: selector(".AFLinkForeground:alias");
  }

  af|panelList::unordered-list {
    margin-top: 4px;
    margin-bottom: 4px;
  }
  /**
    Button Styles
  **/

  button {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
  }

  /**
    ColorField styles
  **/
  af|inputColor::swatch-overlay {
    position: relative;
    left: -7px;
    top: 5px;
  }

  /** navigationLevel styles **/
  af|navigationPane::bar {
    background-color: #EFEFEF;
    padding-left: 6px;
    padding-right: 6px;
  }
  af|navigationPane::bar-active-disabled {
    cursor: default;
  }
  af|navigationPane::bar-active-enabled {
    cursor: pointer;
  }
  af|navigationPane::bar-inactive-disabled {
    cursor: default;
  }
  af|navigationPane::bar-inactive-enabled {
    cursor: pointer;
  }
  af|navigationPane::bar-active-enabled af|navigationPane::bar-content {
    -tr-rule-ref: selector(".AFTextForeground:alias");
    font-weight: bold;
  }
  af|navigationPane::bar-inactive-enabled af|navigationPane::bar-content {
    -tr-rule-ref: selector(".AFTextForeground:alias");
  }
  af|navigationPane::bar-active-enabled af|navigationPane::bar-content a {
    -tr-rule-ref: selector(".AFTextForeground:alias");
  }
  af|navigationPane::bar-inactive-enabled af|navigationPane::bar-content a {
    -tr-rule-ref: selector(".AFTextForeground:alias");
  }
  @agent (touchScreen:none) {
    af|navigationPane::bar-active-enabled af|navigationPane::bar-content a:hover {
      text-decoration: underline;
    }
    af|navigationPane::bar-inactive-enabled af|navigationPane::bar-content a:hover {
      text-decoration: underline;
    }
  }
  af|navigationPane::bar-active-disabled af|navigationPane::bar-content {
    color: gray;
    font-weight: bold;
  }
  af|navigationPane::bar-inactive-disabled af|navigationPane::bar-content {
    color: gray;
  }
  af|navigationPane::bar-active-disabled af|navigationPane::bar-content a {
    color: gray;
  }
  af|navigationPane::bar-inactive-disabled af|navigationPane::bar-content a {
    color: gray;
  }
  af|navigationPane::bar-content {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    padding-top: 3px;
    padding-bottom: 3px;
  }
  af|navigationPane::bar-content a {
    text-decoration: none;
  }
  af|navigationPane::bar-separator {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    padding-left: 6px;
    padding-right: 6px;
    color: gray;
  }


  af|navigationPane::buttons-active-disabled {
    cursor: default;
  }
  af|navigationPane::buttons-active-enabled {
    cursor: pointer;
  }
  af|navigationPane::buttons-inactive-disabled {
    cursor: default;
  }
  af|navigationPane::buttons-inactive-enabled {
    cursor: pointer;
  }
  @agent (touchScreen:none) {
    af|navigationPane::buttons-active-enabled af|navigationPane::buttons-content a:hover {
      text-decoration: underline;
    }
    af|navigationPane::buttons-inactive-enabled af|navigationPane::buttons-content a:hover {
      text-decoration: underline;
    }
  }
  af|navigationPane::buttons-active-disabled af|navigationPane::buttons-content {
    color: gray;
  }
  af|navigationPane::buttons-inactive-disabled af|navigationPane::buttons-content {
    color: gray;
  }
  af|navigationPane::buttons-active-disabled af|navigationPane::buttons-content a {
    color: gray;
  }
  af|navigationPane::buttons-inactive-disabled af|navigationPane::buttons-content a {
    color: gray;
  }
  af|navigationPane::buttons-active-enabled af|navigationPane::buttons-content {
    font-weight: bold;
  }
  af|navigationPane::buttons-active-disabled af|navigationPane::buttons-content {
    font-weight: bold;
  }
  af|navigationPane::buttons-content {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    padding-top: 3px;
    padding-bottom: 3px;
  }
  af|navigationPane::buttons-content a {
    text-decoration: none;
  }
  af|navigationPane::buttons-separator {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    padding-left: 6px;
    padding-right: 6px;
  }
  af|navigationPane::choice-label {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
  }
  af|navigationPane::choice-options {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
  }
  af|navigationPane::choice-button {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
  }
  af|navigationPane::list-active-disabled {
    cursor: default;
  }
  af|navigationPane::list-active-enabled {
    cursor: pointer;
  }
  af|navigationPane::list-inactive-disabled {
    cursor: default;
  }
  af|navigationPane::list-inactive-enabled {
    cursor: pointer;
  }
  @agent (touchScreen:none) {
    af|navigationPane::list-active-enabled af|navigationPane::list-content a:hover {
      text-decoration: underline;
    }
    af|navigationPane::list-inactive-enabled af|navigationPane::list-content a:hover {
      text-decoration: underline;
    }
  }
  af|navigationPane::list-active-disabled af|navigationPane::list-content {
    color: gray;
  }
  af|navigationPane::list-inactive-disabled af|navigationPane::list-content {
    color: gray;
  }
  af|navigationPane::list-active-disabled af|navigationPane::list-content a {
    color: gray;
  }
  af|navigationPane::list-inactive-disabled af|navigationPane::list-content a {
    color: gray;
  }
  af|navigationPane::list-active-enabled af|navigationPane::list-content {
    font-weight: bold;
  }
  af|navigationPane::list-active-disabled af|navigationPane::list-content {
    font-weight: bold;
  }
  af|navigationPane::list-content {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    padding-top: 3px;
    padding-bottom: 3px;
  }
  af|navigationPane::list-content a {
    text-decoration: none;
  }
  af|navigationPane::list-bullet {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    vertical-align: middle;
    width: 17px;
    background-image: url('/adf/images/list-bullet.gif');
    background-position: center;
    background-repeat: no-repeat;
  }
  af|navigationPane::tabs {
    height: 26px;
    overflow: hidden;
  }
  .p_AFOverlappingTabTopHeight:alias {
    height: 22px;
  }
  .p_AFOverlappingTabBottomHeight:alias {
    height: 4px;
  }
  af|navigationPane::tabs-active {
    cursor: pointer;
  }
  af|navigationPane::tabs-inactive {
    cursor: pointer;
  }
  af|navigationPane::tabs-active:disabled {
    cursor: default;
    color: gray;
  }
  af|navigationPane::tabs-inactive:disabled {
    cursor: default;
    color: gray;
  }
  af|navigationPane::tabs-start {
    -tr-rule-ref: selector(".p_AFOverlappingTabTopHeight:alias");
  }
  af|navigationPane::tabs-start-join {
    -tr-rule-ref: selector(".p_AFOverlappingTabTopHeight:alias");
  }
  af|navigationPane::tabs-start-join-from-active {
    -tr-rule-ref: selector(".p_AFOverlappingTabTopHeight:alias");
  }
  af|navigationPane::tabs-start-join-from-inactive {
    -tr-rule-ref: selector(".p_AFOverlappingTabTopHeight:alias");
  }
  af|navigationPane::tabs-mid {
    -tr-rule-ref: selector(".p_AFOverlappingTabTopHeight:alias");
  }
  af|navigationPane::tabs-end-join-to-inactive {
    -tr-rule-ref: selector(".p_AFOverlappingTabTopHeight:alias");
  }
  af|navigationPane::tabs-end {
    -tr-rule-ref: selector(".p_AFOverlappingTabTopHeight:alias");
  }
  af|navigationPane::tabs-bottom-start {
    -tr-rule-ref: selector(".p_AFOverlappingTabBottomHeight:alias");
  }
  af|navigationPane::tabs-bottom-start-content {
    -tr-rule-ref: selector(".p_AFOverlappingTabBottomHeight:alias");
  }
  af|navigationPane::tabs-bottom-mid {
    -tr-rule-ref: selector(".p_AFOverlappingTabBottomHeight:alias");
  }
  af|navigationPane::tabs-bottom-mid-content {
    -tr-rule-ref: selector(".p_AFOverlappingTabBottomHeight:alias");
  }
  af|navigationPane::tabs-bottom-end {
    -tr-rule-ref: selector(".p_AFOverlappingTabBottomHeight:alias");
  }
  af|navigationPane::tabs-bottom-end-content {
    -tr-rule-ref: selector(".p_AFOverlappingTabBottomHeight:alias");
  }
  /** =-= mcc TODO the following tab styles need corresponding RTL versions, images too **/
  /** =-= aew TODO the following tab styles should all be transferred out of base-desktop.xss and into another style sheet! base-desktop.xss should only have primitive styles **/
  af|navigationPane::tabs-start {
    width: 26px;
    background-position: top right;
  }
  af|navigationPane::tabs-start-join {
    width: 26px;
    background-position: top right;
  }
  af|navigationPane::tabs-bottom-start {
    background-repeat: repeat-x;
  }
  af|navigationPane::tabs-bottom-start-content {
    width: 17px;
    background-repeat: no-repeat;
  }
  af|navigationPane::tabs-start-join-from-active {
    width: 14px;
    background-repeat: no-repeat;
  }
  af|navigationPane::tabs-start-join-from-inactive {
    width: 14px;
    background-repeat: no-repeat;
  }
  af|navigationPane::tabs-end-join-to-inactive {
    width: 12px;
    background-repeat: no-repeat;
  }
  af|navigationPane::tabs-mid {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    padding-left: 3px;
    -tr-rule-ref: selector(".AFTextForeground:alias");
    white-space: nowrap;
  }
  af|navigationPane::tabs-mid A {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    -tr-rule-ref: selector(".AFTextForeground:alias");
    text-decoration: none;
  }
  af|navigationPane::tabs-active:disabled af|navigationPane::tabs-mid {
    color: gray;
  }
  af|navigationPane::tabs-inactive:disabled af|navigationPane::tabs-mid {
    color: gray;
  }
  af|navigationPane::tabs-bottom-mid {
    background-repeat: repeat-x;
  }
  af|navigationPane::tabs-end {
    width: 15px;
  }
  af|navigationPane::tabs-bottom-end {
    background-repeat: repeat-x;
  }
  af|navigationPane::tabs-bottom-end-join {
    background-repeat: repeat-x;
  }
  af|navigationPane::tabs-bottom-end-content {
    width: 100%;
    background-repeat: no-repeat;
  }
  af|navigationPane::tabs-active af|navigationPane::tabs-start {
    background-image: url('/adf/images/tab3-start-selected.gif');
  }
  af|navigationPane::tabs-active af|navigationPane::tabs-start-join {
    background-image: url('/adf/images/tab3-start-join-selected.gif');
  }
  af|navigationPane::tabs-active af|navigationPane::tabs-bottom-start {
    background-image: url('/adf/images/tab3-bot-mid-selected.gif');
  }
  af|navigationPane::tabs-active af|navigationPane::tabs-bottom-start-content {
    background-image: url('/adf/images/tab3-bot-start-selected.gif');
  }
  af|navigationPane::tabs-active af|navigationPane::tabs-mid {
    background-image: url('/adf/images/tab3-mid-selected.gif');
    font-weight: bold;
  }
  af|navigationPane::tabs-active af|navigationPane::tabs-mid A {
    font-weight: bold;
  }
  af|navigationPane::tabs-active af|navigationPane::tabs-bottom-mid {
    background-image: url('/adf/images/tab3-bot-mid-selected.gif');
  }
  af|navigationPane::tabs-active af|navigationPane::tabs-end-join-to-inactive {
    background-image: url('/adf/images/tab3-end-join-selected-to-deselected.gif');
  }
  af|navigationPane::tabs-active af|navigationPane::tabs-end {
    background-image: url('/adf/images/tab3-end-selected.gif');
  }
  af|navigationPane::tabs-active af|navigationPane::tabs-bottom-end {
    background-image: url('/adf/images/tab3-bot-mid-selected.gif');
  }
  af|navigationPane::tabs-active af|navigationPane::tabs-bottom-end-join {
    background-image: url('/adf/images/tab3-bot-deselected.gif');
  }
  af|navigationPane::tabs-active af|navigationPane::tabs-bottom-end-content {
    background-image: url('/adf/images/tab3-bot-end-selected.gif');
  }
  af|navigationPane::tabs-inactive af|navigationPane::tabs-start {
    background-image: url('/adf/images/tab3-start-deselected.gif');
  }
  af|navigationPane::tabs-inactive af|navigationPane::tabs-bottom-start {
    background-image: url('/adf/images/tab3-bot-deselected.gif');
  }
  af|navigationPane::tabs-inactive af|navigationPane::tabs-bottom-start-content {
    background-image: none;
  }
  af|navigationPane::tabs-inactive af|navigationPane::tabs-start-join-from-active {
    background-image: url('/adf/images/tab3-start-join-selected-to-deselected.gif');
  }
  af|navigationPane::tabs-inactive af|navigationPane::tabs-start-join-from-inactive {
    background-image: url('/adf/images/tab3-start-join-deselected-to-deselected.gif');
  }
  af|navigationPane::tabs-inactive af|navigationPane::tabs-mid {
    background-image: url('/adf/images/tab3-mid-deselected.gif');
    -tr-rule-ref: selector(".AFTextForeground:alias");
  }
  af|navigationPane::tabs-inactive af|navigationPane::tabs-mid A {
    -tr-rule-ref: selector(".AFTextForeground:alias");
  }
  af|navigationPane::tabs-inactive af|navigationPane::tabs-bottom-mid {
    background-image: url('/adf/images/tab3-bot-deselected.gif');
  }
  af|navigationPane::tabs-inactive af|navigationPane::tabs-end-join-to-inactive {
    background-image: url('/adf/images/tab3-end-join-deselected-to-deselected.gif');
  }
  af|navigationPane::tabs-inactive af|navigationPane::tabs-end {
    background-image: url('/adf/images/tab3-end-deselected.gif');
  }
  af|navigationPane::tabs-inactive af|navigationPane::tabs-bottom-end {
    background-image: url('/adf/images/tab3-bot-deselected.gif');
  }
  af|navigationPane::tabs-inactive af|navigationPane::tabs-bottom-end-join {
    background-image: url('/adf/images/tab3-bot-deselected.gif');
  }
  af|navigationPane::tabs-inactive af|navigationPane::tabs-bottom-end-content {
    background-image: none;
  }
  /** =-= mcc TODO Doc the navigationLevel style classes **/

  af|breadCrumbs {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
  }

  /** panelForm styles **/
  af|panelFormLayout::column {
    vertical-align: top;
  }
  af|panelFormLayout::separator {
    background-color: gray;
    height: 1px;
    font-size: 1px;
    margin-top: 3px;
    margin-bottom: 3px;
  }
  af|panelFormLayout::cell {
    padding: 0px;
  }
  af|panelFormLayout::label-cell {
    -tr-rule-ref: selector(".AFLabel:alias");
  }
  af|panelFormLayout::label-stacked-cell {
    -tr-rule-ref: selector("af|panelFormLayout::cell");
    text-align: left;
  }
  af|panelFormLayout::content-cell {
    -tr-rule-ref: selector("af|panelFormLayout::cell");
  }
  af|panelFormLayout::message-cell {
    -tr-rule-ref: selector("af|panelFormLayout::cell");
  }

  /**
    panelBorderLayout styles

    Note: the skin is used to reduce the DOM size. The positioned elements
    depend on these CSS styles to render correctly.
  **/
  af|panelBorderLayout-positioned {
    position: relative;
    height: 480px;
    width: 640px;
  }
  af|panelBorderLayout-positioned::top {
    position: absolute;
    top: 0px;
    width: 100%;
  }
  af|panelBorderLayout-positioned::inner-top {
    -tr-rule-ref: selector("af|panelBorderLayout-positioned::top");
  }
  af|panelBorderLayout-positioned::bottom {
    position: absolute;
    bottom: 0px;
    width: 100%;
  }
  af|panelBorderLayout-positioned::inner-bottom {
    -tr-rule-ref: selector("af|panelBorderLayout-positioned::bottom");
  }
  af|panelBorderLayout-positioned::start {
    -tr-rule-ref: selector(".AFPanelBorderLayoutStart:alias");
  }
  af|panelBorderLayout-positioned::inner-start {
    -tr-rule-ref: selector(".AFPanelBorderLayoutStart:alias");
  }
  af|panelBorderLayout-positioned::end {
    -tr-rule-ref: selector(".AFPanelBorderLayoutEnd:alias");
  }
  af|panelBorderLayout-positioned::inner-end {
    -tr-rule-ref: selector(".AFPanelBorderLayoutEnd:alias");
  }
  af|panelBorderLayout-positioned::center {
    position: absolute;
  }
  af|panelBorderLayout-positioned::inner-center {
    -tr-rule-ref: selector("af|panelBorderLayout-positioned::center");
  }

   /**
      panelBox Styles

      Note: panelBox use one of two different style strategies,
      depending on whether a header is present.  If the panelBox
      has a header, then three style classes are used:

      1. The outer container is labeled with one of the
         af|panelBox[Background] style classes.

      2. The portion of the content container which contains the header
         is labeled with the af|panelBox::header style class.

      3. The portion of the panelBox which contains the body
         is labeled with the af|panelBox::body style class.

      This allows styles to be applied to the header or body selectively
      based on the background color by using contextual selectors like:

      af|panelBox::dark af|panelBox::body { Dark body colors }
      af|panelBox::light af|panelBox::body { Light body colors }

      Content containers which contain content but do not have a header only
      have two style classes:

      1. The outer container is labeled with one of the
         af|panelBox::content[Background] style classes, ie.
         af|panelBox::content-dark instead of af|panelBox::dark.

      2. The portion of the content container which contains the body
         is labeled with the af|panelBox::body style class.

      af|panelBox::header is not used for these content containers.

    **/
    /**AFPanelBox: used in af|panelBox::transparent, af|panelBox::light,
    af|panelBox::medium, and af|panelBox::dark
    **/
    .AFPanelBox:alias {
    }
    /** when there is a header, the outer container contains on of the
      af|panelBox::[background] styles
    **/
    af|panelBox::transparent {
      -tr-rule-ref: selector(".AFPanelBox:alias");
    }

    af|panelBox::light {
      -tr-rule-ref: selector(".AFPanelBox:alias");
    }

    af|panelBox::medium {
      -tr-rule-ref: selector(".AFPanelBox:alias");
    }

    af|panelBox::dark {
      -tr-rule-ref: selector(".AFPanelBox:alias");
    }

  /** since we render in standards mode, images don't take up the entire
       table cell unless we use vertical-align:bottom.
       We don't publish these obviously, cuz they expose the html **/
    af|panelBox::transparent img {
      vertical-align: bottom;
    }
    af|panelBox::light img {
      vertical-align: bottom;
    }
    af|panelBox::medium img {
      vertical-align: bottom;
    }
    af|panelBox::dark img {
      vertical-align: bottom;
    }

    /** panelBox's frame selectors. No frame by default **/
    af|panelBox::top-start {
    }
    af|panelBox::top {
    }
    af|panelBox::top-end {
    }
    af|panelBox::start {
    }
    af|panelBox::end {
    }
    af|panelBox::bottom-start {
    }
    af|panelBox::bottom {
    }
    af|panelBox::bottom-end {
    }

    /** panelBox's body selectors **/
     /** hook to enable styling on all panelBox body regardless of 'type' **/
    .AFPanelBoxBody:alias {
    }

  /** AFBoxBackground: used in AFShuttleBoxBackground and
      af|panelBox::light af|panelBox::body {
  **/
    .AFBoxBackground:alias {
         -tr-rule-ref: selector(".AFLightAccentBackground:alias");
    }

    af|panelBox::body {
      -tr-rule-ref: selector(".AFPanelBoxBody:alias");
    }

    af|panelBox::transparent af|panelBox::body {
      -tr-rule-ref: selector(".AFPanelBoxBody:alias");
    }

    af|panelBox::light af|panelBox::body {
      -tr-rule-ref: selector(".AFBoxBackground:alias");
      -tr-rule-ref: selector(".AFPanelBoxBody:alias");
    }

    af|panelBox::medium af|panelBox::body {
      -tr-rule-ref: selector(".AFMediumAccentBackground:alias");
      -tr-rule-ref: selector(".AFPanelBoxBody:alias");
    }

    af|panelBox::dark af|panelBox::body {
      -tr-rule-ref: selector(".AFDarkAccentBackground:alias");
      -tr-rule-ref: selector(".AFPanelBoxBody:alias");
    }

    /** panelBox's header selector **/
    af|panelBox::header {
    }

    af|panelBox::light af|panelBox::header {
      -tr-rule-ref: selector(".AFMediumBackground:alias");
      -tr-rule-ref: selector(".TextForegroundDarkBackground:alias");
    }

    /** panelBox's content selector **/
    af|panelBox::content {
    }


    .AFShuttleBoxBackground:alias {
         -tr-rule-ref: selector(".AFBoxBackground:alias");
    }

    .AFShuttleBoxContent:alias {
       -tr-rule-ref: selector(".AFDefaultFont:alias");
    }


    af|selectManyShuttle::box-content {
      -tr-rule-ref: selector(".AFShuttleBoxContent:alias");
    }

    af|selectOrderShuttle::box-content {
      -tr-rule-ref: selector(".AFShuttleBoxContent:alias");
    }
  /** since we render in standards mode, images don't take up the entire
       table cell unless we use vertical-align:bottom.**/
    af|selectManyShuttle::box-content img {
      vertical-align: bottom;
    }
    af|selectOrderShuttle::box-content img {
      vertical-align: bottom;
    }


    /** Named style for all panelBox bodies for
         panelBox which do not have headers **/

    .AFBoxContentBody:alias {
    }

    .AFShuttleBoxContentBody:alias {
      -tr-rule-ref: selector(".AFBoxContentBody:alias");
    }

    af|selectManyShuttle::box-content af|selectManyShuttle::box-body {
      -tr-rule-ref: selector(".AFShuttleBoxBackground:alias");
      -tr-rule-ref: selector(".AFShuttleBoxContentBody:alias");
    }

    af|selectOrderShuttle::box-content af|selectOrderShuttle::box-body {
      -tr-rule-ref: selector(".AFShuttleBoxBackground:alias");
      -tr-rule-ref: selector(".AFShuttleBoxContentBody:alias");
    }


  /**
    Footer Styles
  **/

  .AFFooterMessageText:alias {
    -tr-rule-ref: selector(".AFVerySmallFont:alias");
    -tr-rule-ref: selector(".AFTextForeground:alias");
    white-space: nowrap;
  }

  .AFFooterMessageLink:alias {
    -tr-rule-ref: selector(".AFLinkForeground:alias");
  }

  af|panelPage::copyright {
    -tr-rule-ref: selector(".AFFooterMessageText:alias");
  }

  af|panelPage::copyright-link {
    -tr-rule-ref: selector(".AFFooterMessageLink:alias");
  }

  af|panelPage::privacy {
    -tr-rule-ref: selector(".AFFooterMessageText:alias");
  }

  af|panelPage::privacy-link {
    -tr-rule-ref: selector(".AFFooterMessageLink:alias");
  }

  af|panelPage::about {
    -tr-rule-ref: selector(".AFFooterMessageText:alias");
  }

  af|panelPage::about-link {
    -tr-rule-ref: selector(".AFFooterMessageLink:alias");
  }

  /**
    tr:panelPopup Styles
  **/

  af|panelCaptionGroup {
    -tr-rule-ref: selector(".AFLightAccentBorder:alias");
  }

  af|panelCaptionGroup::caption {
    -tr-rule-ref: selector(".AFDefaultBoldFont:alias");
    -tr-rule-ref: selector(".AFDarkForeground:alias");
  }

  /**
    tr:panelPopup Styles
  **/

  af|panelPopup::link {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    -tr-rule-ref: selector(".AFLinkForeground:alias");
  }

  af|panelPopup::trigger {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    -tr-rule-ref: selector(".AFLinkForeground:alias");
    text-decoration: none;
    white-space: nowrap;
  }

  af|panelPopup::container {
    -tr-rule-ref: selector(".AFVeryDarkBorder:alias");
    border: 1px solid;
    background-color: white;
  }

  af|panelPopup::title-bar {
    -tr-rule-ref: selector(".AFDarkAccentBackground:alias");
    -tr-rule-ref: selector(".AFVeryDarkBorder:alias");
    border-bottom: 1px solid;
    padding: 2px 2px 2px 2px;
  }

  af|panelPopup::title-text {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    -tr-rule-ref: selector(".AFMediumFont:alias");
    white-space: nowrap;
    overflow: hidden;
  }
  /** The following selector should have been called ::close-icon-style, since it is a style,
  not an Icon. It's too late to change since it is public. **/
  af|panelPopup::close-icon {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    -tr-rule-ref: selector(".AFMediumFont:alias");
    text-align: right;
    padding-left: 5px;
  }

  af|panelPopup::content {
    -tr-rule-ref: selector(".AFLightAccentBackground:alias");
    border: 0px;
  }

  af|panelPopup::icon-style {
    border: 0px;
    vertical-align: bottom;
  }

  /**
     tr:menuButtons Styles
   **/
   /** this style is included in all three styles below **/
   .AFMenuButtons:alias {
      -tr-rule-ref: selector(".AFDefaultFont:alias");
   }

   af|menuButtons::text {
     -tr-rule-ref: selector(".AFLinkForeground:alias");
     -tr-rule-ref: selector(".AFMenuButtons:alias");
   }

   af|menuButtons::icon-style {
   }

   af|menuButtons::text-selected {
     -tr-rule-ref: selector(".AFDarkForeground:alias");
     -tr-rule-ref: selector(".AFMenuButtons:alias");
   }

   af|menuButtons::text-disabled {
     -tr-rule-ref: selector(".AFVeryDarkAccentForeground:alias");
     -tr-rule-ref: selector(".AFMenuButtons:alias");
   }


  /**
    menuBar Styles
  **/

  af|menuBar {
    -tr-rule-ref: selector(".AFDarkBackground:alias");
    -tr-rule-ref: selector(".TextForegroundDarkBackground:alias");
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    min-height: 4px;
  }

  /** since we render in standards mode, images don't take up the entire
       table cell unless we use vertical-align:bottom.**/
  af|menuBar img {
    vertical-align: bottom;
  }

  .AFMenuBarItem:alias {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
  }


  af|menuBar::enabled {
    -tr-rule-ref: selector(".AFMenuBarItem:alias");
  }

  af|menuBar::selected {
    -tr-rule-ref: selector(".AFMenuBarItem:alias");
  }

  .AFMenuBarLink:alias {
    -tr-rule-ref: selector(".TextForegroundDarkBackground:alias");
  }

  af|menuBar::enabled-link {
    -tr-rule-ref: selector(".AFMenuBarLink:alias");
  }

  af|menuBar::selected-link {
    -tr-rule-ref: selector(".AFMenuBarLink:alias");
  }

  af|menuBar::separator {
    -tr-rule-ref: selector(".TextForegroundDarkBackground:alias");
    -tr-rule-ref: selector(".AFDefaultFont:alias");
  }

  /**
    HGrid styles
  **/
  af|treeTable::expansion {
    -tr-rule-ref: selector(".AFDarkForeground:alias");

    /** Shift icon over to the start of the cell as
         described in bug 2296869. **/
    position: absolute;
    top: 0px;
    left: -18px;
  }

  af|treeTable::focus {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    -tr-rule-ref: selector(".AFDarkForeground:alias");
    font-family: monospace;
  }

  af|treeTable::locator {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    -tr-rule-ref: selector(".AFVeryDarkAccentForeground:alias");
    font-family: monospace;
  }
   /**
      showOnePanel Styles
    **/

    af|showOnePanel::container {
      -tr-rule-ref: selector(".AFVeryDarkAccentBorder:alias");
      border-width: 0px 1px 1px 1px;
      border-style: solid;
    }

    .AFShowOnePanelHeaderBase:alias {
      -tr-rule-ref: selector(".AFVeryDarkAccentBorder:alias");
      height: 21px;
      text-decoration: none;
      white-space: nowrap;
      padding-right: 5px;
      border-style: solid;
    }

    af|showOnePanel::header-collapsed {
      -tr-rule-ref: selector(".AFShowOnePanelHeaderBase:alias");
      border-width: 1px 0px 0px 0px;
      border-style: solid;
      cursor: pointer;
      padding-left: 5px;
    }

    af|showOnePanel::header-expanded {
      -tr-rule-ref: selector(".AFShowOnePanelHeaderBase:alias");
      border-width: 1px 0px 1px 0px;
      padding-left: 2px;
    }

    af|showOnePanel::header-disabled {
      -tr-rule-ref: selector(".AFShowOnePanelHeaderBase:alias");
      border-width: 1px 0px 0px 0px;
      padding-left: 18px;
    }

    af|showOnePanel::content {
      vertical-align: top;
      margin: 5px;
    }

    af|showOnePanel::title-link {
      -tr-rule-ref: selector(".AFDefaultFont:alias");
      background: transparent;
      color: #669966;
      display: block;
      padding-top: 2px;
      text-decoration: none;
    }

    af|showOnePanel::title-disabled-link {
      -tr-rule-ref: selector(".AFDefaultFont:alias");
      color: #999999;
      display: block;
      padding-top: 2px;
      text-decoration: none;
    }

  /**
    Header styles. panelHeader, showDetailHeader, messages header.
  **/

  .AFHeaderText:alias {
    -tr-rule-ref: selector(".AFDarkForeground:alias");
  }

  .AFHeaderLevelOne {
    -tr-rule-ref: selector(".AFLargeFont:alias");
    -tr-rule-ref: selector(".AFHeaderText:alias");
  }

  .AFHeaderLevelTwo {
    -tr-rule-ref: selector(".AFMediumFont:alias");
    -tr-rule-ref: selector(".AFHeaderText:alias");
  }

  .AFHeaderLevelThreePlus {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    -tr-rule-ref: selector(".AFHeaderText:alias");
  }

  af|panelHeader::level-one {
    -tr-rule-ref: selector(".AFHeaderLevelOne");
  }

  af|panelHeader::level-two {
    -tr-rule-ref: selector(".AFHeaderLevelTwo");
  }

  af|panelHeader::level-three {
    -tr-rule-ref: selector(".AFHeaderLevelThreePlus");

  }

  af|panelHeader::level-four {
    -tr-rule-ref: selector(".AFHeaderLevelThreePlus");
  }

  af|panelHeader::level-five {
    -tr-rule-ref: selector(".AFHeaderLevelThreePlus");
  }

  af|panelHeader::level-six {
    -tr-rule-ref: selector(".AFHeaderLevelThreePlus");

  }

  af|showDetailHeader::level-one {
    -tr-rule-ref: selector(".AFHeaderLevelOne");
  }

  af|showDetailHeader::level-two {
    -tr-rule-ref: selector(".AFHeaderLevelTwo");
  }

  af|showDetailHeader::level-three {
    -tr-rule-ref: selector(".AFHeaderLevelThreePlus");
  }

  af|showDetailHeader::level-four {
    -tr-rule-ref: selector(".AFHeaderLevelThreePlus");
  }

  af|showDetailHeader::level-five {
    -tr-rule-ref: selector(".AFHeaderLevelThreePlus");
  }

  af|showDetailHeader::level-six {
    -tr-rule-ref: selector(".AFHeaderLevelThreePlus");
  }

  af|panelHeader::error {
    -tr-rule-ref: selector(".AFHeaderLevelOne");
    -tr-rule-ref: selector(".AFErrorTextForeground:alias");
  }

  af|panelPage::branding {
  }

  af|messages::error {
    -tr-rule-ref: selector(".AFHeaderLevelOne");
    -tr-rule-ref: selector(".AFErrorTextForeground:alias");
  }

  af|messages::header {
    -tr-rule-ref: selector(".AFHeaderLevelOne");
  }



  /**
    tr:messages Styles
  **/

  af|messages {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    /**includeStyle name="AFMediumAccentBackground"/**/
    -tr-rule-ref: selector(".AFVeryDarkForeground:alias");
    width: 100%;
  }
  /** since we render in standards mode, images don't take up the entire
       table cell unless we use vertical-align:bottom.**/
  af|messages img {
    vertical-align: bottom;
  }

  /**style selector=".p_OraMessageBoxMessage"**/
  af|messages::message-text {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    -tr-rule-ref: selector(".AFDarkForeground:alias");
    -tr-rule-ref: selector(".MessageBoxMargin:alias");
  }

  /**
    panelSideBar styles
  **/

  af|panelSideBar {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    -tr-rule-ref: selector(".AFVeryDarkForeground:alias");
    -tr-rule-ref: selector(".AFVeryDarkAccentBorder:alias");
  }

  /** put the background color on the td **/
  af|panelSideBar::body {
    -tr-rule-ref: selector(".AFLightAccentBackground:alias");
  }

  /**
    SortableHeader styles
  **/
  .AFSortableHeaderSortIcon {
    -tr-rule-ref: selector(".AFSmallFont:alias");
    -tr-rule-ref: selector(".AFDarkForeground:alias");
  }


  /**
    MenuTabs Styles
  **/


  af|menuTabs {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
  }
  /** since we render in standards mode, images don't take up the entire
       table cell unless we use vertical-align:bottom.**/
  af|menuTabs img {
    vertical-align: bottom;
  }

  /** this style is included in enabled, selected, and disabled styles**/
  .AFTabBarItem:alias {
  }

  /** this style is included in enabled-link and selected-link styles **/
  .AFTabBarLink:alias {
  }

  af|menuTabs::enabled {
    -tr-rule-ref: selector(".AFLightAccentBackground:alias");
    -tr-rule-ref: selector(".AFTabBarItem:alias");
  }

  af|menuTabs::selected {
    -tr-rule-ref: selector(".AFDarkBackground:alias");
    -tr-rule-ref: selector(".AFTabBarItem:alias");
   }

  af|menuTabs::disabled {
    -tr-rule-ref: selector(".AFLightAccentBackground:alias");
    -tr-rule-ref: selector(".AFVeryDarkAccentForeground:alias");
    -tr-rule-ref: selector(".AFTabBarItem:alias");
  }

  af|menuTabs::enabled-link {
    -tr-rule-ref: selector(".AFTabBarLink:alias");
    -tr-rule-ref: selector(".AFVeryDarkForeground:alias");
  }

  af|menuTabs::selected-link {
    -tr-rule-ref: selector(".AFTabBarLink:alias");
    -tr-rule-ref: selector(".AFLightForeground:alias");
  }

  /**
     By default we don't want any space between tabs, so we
     set the af|menuTabs::separator's width to 0px
  **/

  af|menuTabs::separator {
    width: 0px;
  }

  /**
    Table Styles
  **/

  /** Rendering on table which contains the actual content -
       everything between the top/bottom control bars **/
  af|table::content {
    border-collapse: collapse;
  }

  af|treeTable::content {
    border-collapse: collapse;
  }

  /** Contains top navigation bar of table **/
  af|table::control-bar-top {
    -tr-rule-ref: selector(".AFTableCellDataBackgroundColor:alias");
    -tr-rule-ref: selector(".AFTableCellDataBorderColor:alias");
    -tr-rule-ref: selector(".OraTableBorder1101");
    padding: 1px 2px;
  }

  /** Contains bottom navigation bar of table**/
  af|table::control-bar-bottom {
    -tr-rule-ref: selector(".AFTableCellDataBackgroundColor:alias");
    -tr-rule-ref: selector(".AFTableCellDataBorderColor:alias");
    -tr-rule-ref: selector(".OraTableBorder0111");
    padding: 1px 2px;
  }

  /** Contains top navigation bar of treeTable **/
  af|treeTable::control-bar-top {
    -tr-rule-ref: selector(".AFTableCellDataBackgroundColor:alias");
    -tr-rule-ref: selector(".AFTableCellDataBorderColor:alias");
    -tr-rule-ref: selector(".OraTableBorder1101");
    padding: 1px 2px;
  }

  /** Contains bottom navigation bar of treeTable**/
  af|treeTable::control-bar-bottom {
    -tr-rule-ref: selector(".AFTableCellDataBackgroundColor:alias");
    -tr-rule-ref: selector(".AFTableCellDataBorderColor:alias");
    -tr-rule-ref: selector(".OraTableBorder0111");
    padding: 1px 2px;
  }

  /** Contains Select All | Select None links **/
  af|table::sub-control-bar {
    -tr-rule-ref: selector(".AFTableCellDataBorderColor:alias");
    -tr-rule-ref: selector(".OraTableBorder1101");
    padding: 1px 2px;
  }

  /** Contains Select All | Select None links **/
  af|treeTable::sub-control-bar {
    -tr-rule-ref: selector(".AFTableCellDataBorderColor:alias");
    -tr-rule-ref: selector(".OraTableBorder1101");
    padding: 1px 2px;
  }

  /** table data cell styles **/
  .AFTableCellDataText:alias {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    -tr-rule-ref: selector(".AFTextForeground:alias");
  }

  .AFTableCellDataBackgroundColor:alias {
    -tr-rule-ref: selector(".AFLightAccentBackground:alias");
  }

  .AFTableCellDataBandedBackgroundColor:alias {
    /** Table cell background color shouldn't vary with text background **/
    background-color: #ffffff;
  }

  .AFTableCellDataBorderColor:alias {
    -tr-rule-ref: selector(".AFVeryDarkAccentBorder:alias");
  }

  .AFTableCellDataVerticalAlign:alias {
      vertical-align: baseline;
  }

  af|commandButton {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    white-space: nowrap;
  }

  af|goButton {
    /** make commandButton primary **/
    -tr-rule-ref: selector("af|commandButton");
  }

  af|resetButton {
    /** make commandButton primary **/
    -tr-rule-ref: selector("af|commandButton");
  }

  af|column::cell-text {
    -tr-rule-ref: selector(".AFTableCellDataText:alias");
    -tr-rule-ref: selector(".AFTableCellDataVerticalAlign:alias");
    -tr-rule-ref: selector(".AFTableCellDataBackgroundColor:alias");
    -tr-rule-ref: selector(".AFTableCellDataBorderColor:alias");
  }

  af|column::cell-text-band {
    -tr-rule-ref: selector(".AFTableCellDataText:alias");
    -tr-rule-ref: selector(".AFTableCellDataVerticalAlign:alias");
    -tr-rule-ref: selector(".AFTableCellDataBandedBackgroundColor:alias");
    -tr-rule-ref: selector(".AFTableCellDataBorderColor:alias");
  }

  af|column::cell-number {
    -tr-rule-ref: selector(".AFTableCellDataText:alias");
    -tr-rule-ref: selector(".AFTableCellDataVerticalAlign:alias");
    -tr-rule-ref: selector(".AFTableCellDataBackgroundColor:alias");
    -tr-rule-ref: selector(".AFTableCellDataBorderColor:alias");
    -tr-rule-ref: selector(".AFRightTextAlign:alias");
    padding-right: 2px;
  }

  af|column::cell-number-band {
    -tr-rule-ref: selector(".AFTableCellDataText:alias");
    -tr-rule-ref: selector(".AFTableCellDataVerticalAlign:alias");
    -tr-rule-ref: selector(".AFTableCellDataBandedBackgroundColor:alias");
    -tr-rule-ref: selector(".AFTableCellDataBorderColor:alias");
    -tr-rule-ref: selector(".AFRightTextAlign:alias");
    padding-right: 2px;
  }

  af|column::cell-icon-format {
    -tr-rule-ref: selector(".AFTableCellDataText:alias");
    -tr-rule-ref: selector(".AFTableCellDataVerticalAlign:alias");
    -tr-rule-ref: selector(".AFTableCellDataBackgroundColor:alias");
    -tr-rule-ref: selector(".AFTableCellDataBorderColor:alias");
    -tr-rule-ref: selector(".AFCenterTextAlign:alias");
  }
  af|tableSelectOne::cell-icon-format {
    -tr-rule-ref: selector("af|column::cell-icon-format");
  }
  af|tableSelectMany::cell-icon-format {
    -tr-rule-ref: selector("af|column::cell-icon-format");
  }

  af|column::cell-icon-format-band {
    -tr-rule-ref: selector(".AFTableCellDataText:alias");
    -tr-rule-ref: selector(".AFTableCellDataVerticalAlign:alias");
    -tr-rule-ref: selector(".AFTableCellDataBandedBackgroundColor:alias");
    -tr-rule-ref: selector(".AFTableCellDataBorderColor:alias");
    -tr-rule-ref: selector(".AFCenterTextAlign:alias");
  }

  af|tableSelectOne::cell-icon-format-band {
    -tr-rule-ref: selector("af|column::cell-icon-format-band");
  }
  af|tableSelectMany::cell-icon-format-band {
    -tr-rule-ref: selector("af|column::cell-icon-format-band");
  }

  af|column::header-text {
    -tr-rule-ref: selector(".TableCellHeaderBorderColor:alias");
    -tr-rule-ref: selector(".AFDefaultBoldFont:alias");
    -tr-rule-ref: selector(".AFStartTextAlign:alias");
    -tr-rule-ref: selector(".AFDarkAccentBackground:alias");
    -tr-rule-ref: selector(".AFDarkForeground:alias");
    vertical-align: bottom;
  }

  af|column::header-number {
    -tr-rule-ref: selector("af|column::header-text");
    -tr-rule-ref: selector(".AFRightTextAlign:alias");
  }

  af|column::header-icon-format {
    -tr-rule-ref: selector("af|column::header-text");
    -tr-rule-ref: selector(".AFCenterTextAlign:alias");
  }

  af|column::row-header-text {
    -tr-rule-ref: selector(".TableCellHeaderBorderColor:alias");
    -tr-rule-ref: selector(".AFDefaultBoldFont:alias");
    -tr-rule-ref: selector(".AFEndTextAlign:alias");
    -tr-rule-ref: selector(".AFDarkAccentBackground:alias");
    -tr-rule-ref: selector(".AFDarkForeground:alias");
  }

  af|table::detail {
    -tr-rule-ref: selector(".AFTableCellDataText:alias");
    /** Table cell background color shouldn't vary with text background **/
    background-color: #ffffff;
    -tr-rule-ref: selector(".AFTableCellDataBorderColor:alias");
  }

  af|table::column-footer {
    -tr-rule-ref: selector(".TableCellHeaderBorderColor:alias");
    -tr-rule-ref: selector(".AFDefaultBoldFont:alias");
    -tr-rule-ref: selector(".AFStartTextAlign:alias");
    -tr-rule-ref: selector(".AFDarkAccentBackground:alias");
    -tr-rule-ref: selector(".AFDarkForeground:alias");
  }

  /** for totalRow button and text **/
  /** jmw are we still using the TotalRow renderer that uses this style? **/
  .OraTableTotal {
    -tr-rule-ref: selector(".AFDefaultBoldFont:alias");
    -tr-rule-ref: selector(".AFEndTextAlign:alias");
    -tr-rule-ref: selector(".AFDarkAccentBackground:alias");
    -tr-rule-ref: selector(".AFDarkForeground:alias");
  }

  /** for cells containing a total **/
  af|column::total-number {
    -tr-rule-ref: selector(".TableCellHeaderBorderColor:alias");
    -tr-rule-ref: selector(".AFDefaultBoldFont:alias");
    -tr-rule-ref: selector(".AFRightTextAlign:alias");
    -tr-rule-ref: selector(".AFDarkAccentBackground:alias");
    -tr-rule-ref: selector(".AFTextForeground:alias");
    -tr-rule-ref: selector(".AFTableCellDataVerticalAlign:alias");
  }

  /** for cells containing a total **/
  af|column::total-text {
    -tr-rule-ref: selector(".TableCellHeaderBorderColor:alias");
    -tr-rule-ref: selector(".AFDefaultBoldFont:alias");
    -tr-rule-ref: selector(".AFStartTextAlign:alias");
    -tr-rule-ref: selector(".AFDarkAccentBackground:alias");
    -tr-rule-ref: selector(".AFTextForeground:alias");
    -tr-rule-ref: selector(".AFTableCellDataVerticalAlign:alias");
  }

  /** for sortable columns **/
  af|column::sortable-header-text {
    -tr-rule-ref: selector("af|column::header-text");
    cursor: pointer;
    border-width: 2px;
    border-style: outset;
  }

  af|column::sortable-header-number {
    -tr-rule-ref: selector("af|column::sortable-header-text");
    -tr-rule-ref: selector(".AFRightTextAlign:alias");
  }

  af|column::sortable-header-icon-format {
    -tr-rule-ref: selector("af|column::sortable-header-text");
    -tr-rule-ref: selector(".AFCenterTextAlign:alias");
  }

  /** for the currently sorted column **/
  af|column::sorted-header-text {
    -tr-rule-ref: selector("af|column::sortable-header-text");
  }

  af|column::sorted-header-number {
    -tr-rule-ref: selector("af|column::sorted-header-text");
    -tr-rule-ref: selector(".AFRightTextAlign:alias");
  }

  af|column::sorted-header-icon-format {
    -tr-rule-ref: selector("af|column::sorted-header-text");
    -tr-rule-ref: selector(".AFCenterTextAlign:alias");
  }

  /**
    Train Styles
  **/

  /** Aliases **/
  .AFTrainContent:alias {}
  .AFTrainIconCell:alias {}
  .AFTrainJoin:alias {}

  /** Selectors **/
  af|train {}

  /** Station selectors **/
  af|train::stop {
  }

  af|train::stop-icon-cell {
    -tr-rule-ref: selector(".AFTrainIconCell:alias");
  }

  af|train::stop-content {
    -tr-rule-ref: selector(".AFTrainContent:alias");
  }

  af|train::stop:selected {
    -tr-rule-ref: selector(".AFDarkForeground:alias");
    font-weight: bold;
  }

  af|train::stop:visited {
    -tr-rule-ref: selector(".DarkExtraAccentForeground:alias");
  }

  af|train::stop:disabled {
    -tr-rule-ref: selector(".MediumExtraAccentForeground:alias");
  }

  af|train::stop:unvisited {
    -tr-rule-ref: selector(".AFDarkForeground:alias");
  }

  af|train::overflow-start {
  }

  af|train::overflow-start-icon-cell {
    -tr-rule-ref: selector(".AFTrainIconCell:alias");
  }

  af|train::overflow-start-content {
    -tr-rule-ref: selector(".AFTrainContent:alias");
  }

  af|train::overflow-end {
  }

  af|train::overflow-end-icon-cell {
    -tr-rule-ref: selector(".AFTrainIconCell:alias");
  }

  af|train::overflow-end-content {
    -tr-rule-ref: selector(".AFTrainContent:alias");
  }

  af|train::parent-start {
  }

  af|train::parent-start-icon-cell {
    -tr-rule-ref: selector(".AFTrainIconCell:alias");
  }

  af|train::parent-start-content {
    -tr-rule-ref: selector(".AFTrainContent:alias");
  }

  af|train::parent-end {
  }

  af|train::parent-end-icon-cell {
    -tr-rule-ref: selector(".AFTrainIconCell:alias");
  }

  af|train::parent-end-content {
    -tr-rule-ref: selector(".AFTrainContent:alias");
  }

  af|train::link {
    -tr-rule-ref: selector(".AFLinkForeground:alias");
  }

  af|train::stop:disabled af|train::link {
    -tr-rule-ref: selector(".AFDisabledLinkForeground:alias");
  }

  af|train::stop:visited af|train::link {
    -tr-rule-ref: selector(".AFDarkForeground:alias");
    -tr-rule-ref: selector(".DarkExtraAccentForeground:alias");
  }

  af|train::join {
    -tr-rule-ref: selector(".AFTrainJoin:alias");
  }

  af|train::join-overflow {
    -tr-rule-ref: selector(".AFTrainJoin:alias");
  }

  af|train::join-parent {
    -tr-rule-ref: selector(".AFTrainJoin:alias");
  }

  /**

    Section 2: Private styles.   The styles defined in this section need
    to be reviewed to determine whether they should be exposed to
    customizers.

  **/

  /**
    Private Font Styles:  These styles should probably be made public.
  **/

  /** A very small font for text which appears within a link **/
  .VerySmallLinkFont:alias {
    -tr-rule-ref: selector(".AFVerySmallFont:alias");
  }

  /** A small font for text which appears within a link **/
  .SmallLinkFont:alias {
    -tr-rule-ref: selector(".AFSmallFont:alias");
  }


  /**
    Private Color Styles:  Most of these styles should probably
    just be documented and made public.
  **/

  /** The "extra" accent ramp is a gray color ramp used in various places
       to provide shading.  VeryDarkExtraAccentBackground is the darkest
       color in this color ramp. **/
  .VeryDarkExtraAccentBackground:alias {
    background-color: #333333;
  }

  /** The "extra" accent ramp is a gray color ramp used in various places
       to provide shading.  DarkExtraAccentBackground is the primary
       color in this color ramp. **/
  .DarkExtraAccentBackground:alias {
    background-color: #666666;
  }

  /** The "extra" accent ramp is a gray color ramp used in various places
       to provide shading.  MediumExtraAccentBackground is the middle
       color in this color ramp. **/
  .MediumExtraAccentBackground:alias {
    background-color: #999999;
  }

  /** The "extra" accent ramp is a gray color ramp used in various places
       to provide shading.  LightExtraAccentBackground is the lightest
       color in this color ramp. **/
  .LightExtraAccentBackground:alias {
    background-color: #cccccc;
  }

  /** DarkExtraAccentForeground is the primary foreground color in the
       extra accent (gray) color ramp **/
  .DarkExtraAccentForeground:alias {
    color: -tr-property-ref(".DarkExtraAccentBackground:alias","background-color");
  }

  /** MediumExtraAccentForeground is the middle foreground color in the
       extra accent (gray) color ramp **/
  .MediumExtraAccentForeground:alias {
    color: -tr-property-ref(".MediumExtraAccentBackground:alias","background-color");
  }

  .TextForegroundDarkBackground:alias {
      color: -tr-property-ref(".AFTextBackground:alias","background-color");  
  }
/** we took these out of the xsd, so they are no longer options for the styleClass.
     we probably should delete these, but they may come in handy for skinning at some
     pt. **/
  .OraBGColorVeryDark {
    -tr-rule-ref: selector(".AFVeryDarkBackground:alias");
  }

  .OraBGColorDark {
    -tr-rule-ref: selector(".AFDarkBackground:alias");
   }

  .OraBGColorMedium {
    -tr-rule-ref: selector(".AFMediumBackground:alias");
  }

  .OraBGColorLight {
    -tr-rule-ref: selector(".AFLightBackground:alias");
  }

  .OraBGGrayVeryDark {
    -tr-rule-ref: selector(".VeryDarkExtraAccentBackground:alias");
  }

  .OraBGGrayDark {
    -tr-rule-ref: selector(".DarkExtraAccentBackground:alias");
  }

  .OraBGGrayMedium {
    -tr-rule-ref: selector(".MediumExtraAccentBackground:alias");
  }

  .OraBGGrayLight {
    -tr-rule-ref: selector(".LightExtraAccentBackground:alias");
  }

  .OraBGAccentVeryDark {
    -tr-rule-ref: selector(".AFVeryDarkAccentBackground:alias");
  }

  .OraBGAccentDark {
    -tr-rule-ref: selector(".AFDarkAccentBackground:alias");
  }

  .OraBGAccentMedium {
    -tr-rule-ref: selector(".AFMediumAccentBackground:alias");
  }

  .OraBGAccentLight {
    -tr-rule-ref: selector(".AFLightAccentBackground:alias");
  }

  /**
    Private BIDI Styles:  Not sure if these are generally useful, but
    if so, these could be made public.
  **/

  .LTROverride:alias {
  }

  /**
    Private Text Styles
  **/

  /** Implementation detail of styleUsage="inContextBranding" **/
  .p_InContextBrandingText {
      -tr-rule-ref: selector(".AFDefaultFont:alias");
      -tr-rule-ref: selector(".AFVeryDarkAccentForeground:alias");
  }

  /** Implementation detail of styleUsage="pageStamp" **/
  .OraPageStampText {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    -tr-rule-ref: selector(".AFDarkForeground:alias");
  }

  /** Don't think we use this one? **/
  .OraPageStampLabel {
    -tr-rule-ref: selector(".AFDefaultBoldFont:alias");
    -tr-rule-ref: selector(".AFDarkForeground:alias");
  }

  /** Should probably be public **/
  .OraInlineInfoText {
    -tr-rule-ref: selector(".AFVerySmallFont:alias");
    -tr-rule-ref: selector(".AFDarkForeground:alias");
  }

  /** Should probably be public **/
  .OraTextInline {
    -tr-rule-ref: selector(".AFVerySmallFont:alias");
    -tr-rule-ref: selector(".AFMediumForeground:alias");
  }

  /** used only in oracle.desktop messageBox **/
  .OraMessageBoxErrorText {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    -tr-rule-ref: selector(".AFErrorTextForeground:alias");
  }

  /** will be included in the property inspector for styleClass attribute **/
  .AFErrorText {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    -tr-rule-ref: selector(".AFErrorTextForeground:alias");
  }

  /** Should probably be public **/
  .OraErrorNameText {
    -tr-rule-ref: selector(".AFDefaultBoldFont:alias");
    -tr-rule-ref: selector(".AFErrorTextForeground:alias");
  }

  /** Should probably be public **/
  .OraInlineErrorText {
    -tr-rule-ref: selector(".AFVerySmallFont:alias");
    -tr-rule-ref: selector(".AFErrorTextForeground:alias");
  }

  /** Should probably be public **/
  .OraGlobalPageTitle {
    -tr-rule-ref: selector(".AFLargeFont:alias");
    -tr-rule-ref: selector(".AFSelectedTextForeground:alias");
    font-weight: bold;
  }

  /** Should probably be public **/
  .OraLinkText {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    -tr-rule-ref: selector(".AFLinkForeground:alias");
  }

  /** Should probably be public **/
  .OraVLinkText {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    -tr-rule-ref: selector(".AFVisitedLinkForeground:alias");
  }

  /** Should probably be public **/
  .OraALinkText {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    -tr-rule-ref: selector(".AFActiveLinkForeground:alias");
  }


  .AFFieldTextLTR {
    -tr-rule-ref: selector(".AFFieldText");
    -tr-rule-ref: selector(".LTROverride:alias");
  }

  .AFFieldTextLTRDisabled {
    -tr-rule-ref: selector(".AFFieldTextDisabled");
    -tr-rule-ref: selector(".LTROverride:alias");
  }

  .AFPhoneFieldText {
    -tr-rule-ref: selector(".AFFieldTextLTR");
  }

  .AFPhoneFieldTextDisabled {
    -tr-rule-ref: selector(".AFFieldTextLTRDisabled");
  }

  .AFPostalCodeFieldText {
    -tr-rule-ref: selector(".AFFieldTextLTR");
  }

  .AFPostalCodeFieldTextDisabled {
    -tr-rule-ref: selector(".AFFieldTextLTRDisabled");
  }

  .AFAddressFieldText {
    -tr-rule-ref: selector(".AFFieldTextLTR");
  }

  .AFAddressFieldTextDisabled {
    -tr-rule-ref: selector(".AFFieldTextLTRDisabled");
  }

  /** Underline the access key for buttons, labels **/
  .AFAccessKeyStyle {
  text-decoration: underline;
  }

  /** Bold the access key for links **/
  .AFLinkAccessKeyStyle {
  font-weight: bold;
  }

  /**
    Private Utility Styles:  Again, if any of these are useful
    to customizers, they should be documented and made public.
  **/

  .NoTextAlign:alias {
    text-align;
  }

  /** Need to come up with a disabled link style strategy that
       doesn't rely on private styles **/
   .p_OraDisabled {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
  }

  /** Need to come up with a selected link style strategy that
       doesn't rely on private styles **/
  .p_OraSelected {
    -tr-rule-ref: selector(".AFDefaultBoldFont:alias");
    -tr-rule-ref: selector(".AFLightBackground:alias");
    text-decoration: none;
  }

  /** This style should never be exposed.  Implementation detail only **/
  .p_OraHiddenLabel {
    position: absolute;
    top: -999px;
    left: 0px;
    font-size: 0px;
  }

  /**
    Private ColorField Styles:  These styles need to be reviewed/renamed
    if they need to be exposed.
  **/

  .p_OraColorFieldSwatch {
    border-style: solid;
    border-width: 1px;
    border-color: -tr-property-ref(".AFTextForeground:alias","color");  
  }

  .p_OraColorPalette {
    background-color: -tr-property-ref(".AFTextForeground:alias","color");
  }

  .p_OraColorPaletteEmptyCell {
    -tr-rule-ref: selector(".AFTextBackground:alias");
  }

  /**
   Date Picker   Styles
  **/

  .AFDatePickerNavLink:alias {
    text-decoration: none;
    -tr-rule-ref: selector(".AFLinkForeground:alias");
  }

  .AFDatePickerTitle:alias {
    -tr-rule-ref: selector(".AFLargeFont:alias");
    -tr-rule-ref: selector(".AFCenterTextAlign:alias");
    -tr-rule-ref: selector(".AFTextBackground:alias");
    -tr-rule-ref: selector(".AFDarkForeground:alias");
    padding: 2px;
  }

  .AFDatePickerHeader:alias {
    -tr-rule-ref: selector(".AFDefaultBoldFont:alias");
    -tr-rule-ref: selector(".AFCenterTextAlign:alias");
    -tr-rule-ref: selector(".AFDarkForeground:alias");
    padding: 2px;
  }

  .AFDatePickerContent:alias {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    -tr-rule-ref: selector(".AFCenterTextAlign:alias");
    -tr-rule-ref: selector(".MediumExtraAccentForeground:alias");
    text-decoration: none;
    border-color: -tr-property-ref(".AFDatePickerHeader:alias","background-color");
    border-width: 1px;
    border-style: solid;
    padding: 2px;
  }


  .AFDatePickerSelected:alias {
    font-weight: bold;
  }

  .AFDatePickerContentLink:alias {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    -tr-rule-ref: selector(".AFCenterTextAlign:alias");
    -tr-rule-ref: selector(".AFLinkForeground:alias");
  }


/**
  Date Picker Styles.
**/

  af|inputDate::nav-link {
    -tr-rule-ref: selector(".AFDatePickerNavLink:alias");
  }

  af|inputDate::title {
    -tr-rule-ref: selector(".AFDatePickerTitle:alias");
  }

  af|inputDate::header {
    -tr-rule-ref: selector(".AFDatePickerHeader:alias");
  }

  af|inputDate::selected {
    -tr-rule-ref: selector(".AFDatePickerSelected:alias");
  }

  af|inputDate::content-link {
    -tr-rule-ref: selector(".AFDatePickerContentLink:alias");
  }

  af|chooseDate::nav-link {
    -tr-rule-ref: selector(".AFDatePickerNavLink:alias");
  }

  af|chooseDate::title {
    -tr-rule-ref: selector(".AFDatePickerTitle:alias");
  }

  af|chooseDate::header {
    -tr-rule-ref: selector(".AFDatePickerHeader:alias");
  }

  af|chooseDate::content {
    -tr-rule-ref: selector(".AFDatePickerContent:alias");
  }


  af|chooseDate::selected {
    -tr-rule-ref: selector(".AFDatePickerSelected:alias");
  }

  af|chooseDate::content-link {
    -tr-rule-ref: selector(".AFDatePickerContentLink:alias");
  }

  af|statusIndicator {}

  af|statusIndicator::busy {}

  af|statusIndicator::ready {}

  /**
    Private ContentFooter Styles:  Not sure whether any of these
    styles need to be exposed, but if so, they need to be renamed
    accordingly (no "p_" prefix).
  **/

  .p_OraContentFooterRule {
    -tr-rule-ref: selector(".AFDarkForeground:alias");
  }

  .p_OraContentFooterStart {
    -tr-rule-ref: selector(".AFFloatStart:alias");
  }

  .p_OraContentFooterChildren {
    -tr-rule-ref: selector(".AFFloatEnd:alias");
  }

  .p_OraContentFooterBottom {
    clear: both;
    margin-bottom: 5px;
  }


  /**
    Private Footer Styles: Again, if these styles are useful
    to customizers, they'll need to be renamed.
  **/

  .p_OraFooter {
    text-align: center;
  }

  .p_OraFooterBottom {
    padding-top: 5px;
  }

  .p_OraHeaderNest {
    margin: 5px 0px 0px 12px;
  }

  /**
    Private HGrid Styles: Need to review hGrid/table styles before
    they are exposed to customizers.
  **/

  .OraHGridLocatorHeader {
    -tr-rule-ref: selector(".TableCellHeaderBorderColor:alias");
    -tr-rule-ref: selector(".AFLightAccentBackground:alias");
  }

  .OraHGridNavRowActiveLink {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    -tr-rule-ref: selector(".AFLinkForeground:alias");
  }

  .OraHGridNavRowInactiveLink {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    -tr-rule-ref: selector(".AFVeryDarkAccentForeground:alias");
  }


  /**
    Private HideShow Styles
  **/

  /**
    This is a private style that is used by the
    base.desktop implementation of the hideShowDisclosed
    and hideShowUndisclosed icons.  Note that this style
    attempts to turn off the link's text decoaration, but
    this doesn't actually work on Mozilla.  The problem is
    that this style is not actually rendered on a link, but
    on a span within a link.  IE seems to honor the span's text
    decoration style in this case but Mozilla seems to require
    that the text decoration be specified at the link level.

    We need to re-design the way hideShow renders its icon/prompt
    to work around this problem.  At that point, it might be
    possible to remove this style altogether - or rename this
    style and make it public.  In the meantime, customizers
    are discouraged from depending on this style.
  **/
  .p_OraHideShowDisclosedSymbol {
    -tr-rule-ref: selector(".AFDarkForeground:alias");
    text-decoration: none;
  }

  /**
    Private MessageBox Styles:  These styles need to be reviewed before
    they can be exposed to customizers.
  **/

  .MessageBoxMargin:alias {
    margin: 0px 0px 0px 0px;
    padding: 5px 30px 5px 30px;
  }

  /**style selector=".OraMessageBoxList"**/
  af|messages::list {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    -tr-rule-ref: selector(".AFDarkForeground:alias");
    -tr-rule-ref: selector(".MessageBoxMargin:alias");
  }

	/** List with only one entry **/
  af|messages::list-single {
    list-style-type: none;
  }

  af|singleStepButtonBar {}

  af|singleStepButtonBar::label {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    -tr-rule-ref: selector(".AFDarkForeground:alias");
  }

  /**
    Private NavigationBar Styles: These styles should probably be
    public, but should they be renamed "OraNavigationBar..." first
    to follow our Ora<Component Name> naming convention?
  **/

  .OraNavBarActiveLink {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    -tr-rule-ref: selector(".AFLinkForeground:alias");
  }

  .OraNavBarInactiveLink {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    -tr-rule-ref: selector(".AFVeryDarkAccentForeground:alias");
  }

  .OraNavBarViewOnly {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    -tr-rule-ref: selector(".AFDarkForeground:alias");
  }

  /**
    Private PageLayout Styles: These styles clearly need to be
    reviewed and renamed before they can be exposed.
  **/

  .p_OraQuickSearchBox {
    -tr-rule-ref: selector(".AFLightAccentBackground:alias");
    -tr-rule-ref: selector(".AFDarkAccentBorder:alias");
    border-style: solid;
    padding: 0pt 5pt 5pt 5pt;
    border-width: 0px 0px 1px 1px;
  }

  .p_OraGlobalQuick {
    -tr-rule-ref: selector(".AFDarkAccentBorder:alias");
    border-style: solid;
    border-width: 0px 0px 0px 1px;
  }

  /**
    Private Processing Styles:  Needs review and rename before
    epxosing to customizers. =-=jmw I'm fine with keeping this private for now.
  **/
  .p_OraProcessingStatus {
    -tr-rule-ref: selector(".AFDefaultBoldFont:alias");
    -tr-rule-ref: selector(".AFDarkForeground:alias");
    -tr-rule-ref: selector(".AFMediumBorder:alias");
    border-style: solid;
    border-width: 1px;
  }

  /**
    Private ProductBranding Styles:  Needs review and rename before
    exposing to customizers.
  **/

  .p_OraProductBrandingText {
    position: relative;
    font-family: Garamond, Times, Times New Roman, Serif;
    font-weight: normal;
    font-size: 24pt;
    line-height: 28.8pt;
    top: -4.8pt;
    color: -tr-property-ref(".AFDarkBackground:alias","background-color");
  }

  /** private style for ProductBranding component compact text **/
  .p_OraProductBrandingCompactText {
      -tr-rule-ref: selector(".AFDarkForeground:alias");
      margin-bottom: 0px;
      margin-top: 0px;
      font-weight: normal;
      -tr-rule-ref: selector(".AFLargeFont:alias");
      font-weight: bold;
  }

  /**
    Private Shuttle Styles:  These styles might very well be exposed -
    just need to be reviewed first to make sure they are useful.
  **/

  .OraShuttleHeader {
    -tr-rule-ref: selector(".AFSmallFont:alias");
    font-weight: bold;
    -tr-rule-ref: selector(".AFDarkForeground:alias");
    padding: 0px 0px 0px 18px;
  }

  .OraShuttleLinkText {
    -tr-rule-ref: selector(".SmallLinkFont:alias");
    -tr-rule-ref: selector(".AFLinkForeground:alias");
  }

  /**
    Private SideBar Styles
  **/

  /** Expose this so custmozers can control sideBar min width? **/
  .p_OraSideBarMinWidth {
    width: 140px;
  }

  /**
    Private StyledList Styles:  We really need to clean up our
    styledList/styledItem style strategy so that these components
    can be better customized.
  **/

  .OraNav3Selected {
    -tr-rule-ref: selector(".AFDefaultBoldFont:alias");
    -tr-rule-ref: selector(".AFLightBackground:alias");
  }

  .OraNav3 {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
  }

  .list:alias {
    list-style-position: inside;
    padding: 0px;
    margin: 0px;
  }

  .nestedList:alias {
    padding: 0pt 0pt 0pt 10pt;
  }

  .OraStyledList {
    -tr-rule-ref: selector(".list:alias");
  }

  .OraStyledList .OraStyledList {
    -tr-rule-ref: selector(".nestedList:alias");
  }


  /**
    Private SubTabBar Styles: Before we make these styles public,
    we need to re-evaluate the use of the private p_OraDisabled style -
    and possibly consider splitting .OraSubTab into
    OraSubTabBarEnabled/OraSubTabBarDisabled/OraSubTabBarSelected
    style classes - like tabBar and globalHeader.
  **/

  .AFPanelTabbed:alias {
  }


  af|panelTabbed::orientation-top {
    -tr-rule-ref: selector(".AFPanelTabbed:alias");
  }

  af|panelTabbed::orientation-bottom {
    -tr-rule-ref: selector(".AFPanelTabbed:alias");
  }

  af|panelTabbed::tab {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    padding: 0px 8px;
  }

  af|panelTabbed::tab-link {
    -tr-rule-ref: selector(".AFLinkForeground:alias");
  }

  af|panelTabbed::tab .p_OraDisabled {
    -tr-rule-ref: selector(".AFVeryDarkAccentForeground:alias");
  }

  af|panelTabbed::tab-selected {
    -tr-rule-ref: selector(".AFDefaultBoldFont:alias");
    padding: 0px 8px;
  }

  af|panelTabbed::tab-selected-link {
    -tr-rule-ref: selector(".AFDarkForeground:alias");
    text-decoration: none;
  }

  af|panelTabbed::cell-start {
    width: 0%;
  }

  af|panelTabbed::cell-end {
    width: 100%;
  }
  /**
    Private Table Styles: These styles can probably just be made public,
    but before we do that we should review to make sure that we are
    happy with the current set of styles.
  **/

  /** table borders **/
  .OraTableBorder0001 {
    border-style: solid;
    border-width: 0px 0px 0px 1px;
  }

  .OraTableBorder0010 {
    border-style: solid;
    border-width: 0px 0px 1px;
  }

  .OraTableBorder0011 {
    border-style: solid;
    border-width: 0px 0px 1px 1px;
  }

  .OraTableBorder0100 {
    border-style: solid;
    border-width: 0px 1px 0px 0px;
  }

  .OraTableBorder0101 {
    border-style: solid;
    border-width: 0px 1px;
  }

  .OraTableBorder0110 {
    border-style: solid;
    border-width: 0px 1px 1px 0px;
  }

  .OraTableBorder0111 {
    border-style: solid;
    border-width: 0px 1px 1px;
  }

  .OraTableBorder1000 {
    border-style: solid;
    border-width: 1px 0px 0px;
  }

  .OraTableBorder1001 {
    border-style: solid;
    border-width: 1px 0px 0px 1px;
  }

  .OraTableBorder1010 {
    border-style: solid;
    border-width: 1px 0px;
  }

  .OraTableBorder1011 {
    border-style: solid;
    border-width: 1px 0px 1px 1px;
  }

  .OraTableBorder1100 {
    border-style: solid;
    border-width: 1px 1px 0px 0px;
  }

  .OraTableBorder1101 {
    border-style: solid;
    border-width: 1px 1px 0px;
  }

  .OraTableBorder1110 {
    border-style: solid;
    border-width: 1px 1px 1px 0px;
  }

  .OraTableBorder1111 {
    border-style: solid;
    border-width: 1px;
  }

  .OraTableControlBarText {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    -tr-rule-ref: selector(".AFDarkForeground:alias");
    font-weight: bold;
  }

  /** Table title is deprecated - don't expose this style **/
  .OraTableTitle {
    -tr-rule-ref: selector(".AFLargeFont:alias");
    -tr-rule-ref: selector(".AFTextBackground:alias");
    -tr-rule-ref: selector(".AFDarkForeground:alias");
  }

  /** Only used on Netscape 4? **/
  .OraTable {
    -tr-rule-ref: selector(".AFVeryDarkAccentBackground:alias");
  }

  /** This is actually used by a wide range of style classes,
       not just headers.  Might want to refactor - keep this
       private till then **/
  .TableCellHeaderBorderColor:alias {
    -tr-rule-ref: selector(".AFVeryDarkAccentBorder:alias");
  }



  /** Couldn't find any code that uses the CellSelect style **/
  .OraTableCellSelect {
    -tr-rule-ref: selector(".AFTableCellDataText:alias");
    -tr-rule-ref: selector(".AFTableCellDataVerticalAlign:alias");
    -tr-rule-ref: selector(".AFTableCellDataBackgroundColor:alias");
    -tr-rule-ref: selector(".AFTableCellDataBorderColor:alias");
    -tr-rule-ref: selector(".AFCenterTextAlign:alias");
  }

  /** Couldn't find any code that uses the CellSelect style **/
  .OraTableCellSelectBand {
    -tr-rule-ref: selector(".AFTableCellDataText:alias");
    -tr-rule-ref: selector(".AFTableCellDataVerticalAlign:alias");
    -tr-rule-ref: selector(".AFTableCellDataBandedBackgroundColor:alias");
    -tr-rule-ref: selector(".AFTableCellDataBorderColor:alias");
    -tr-rule-ref: selector(".AFCenterTextAlign:alias");
  }



  /**
    Private Tip Styles: These can probably be made public.
  **/


  /**
    Private Tree Styles:  These styles need to be renamed (no "p_")
    if they are going to be exposed to customizers.
  **/

  .p_OraTreeDisclosedSymbol {
    -tr-rule-ref: selector(".AFDarkForeground:alias");
    -tr-rule-ref: selector(".AFDefaultFont:alias");
    -tr-rule-ref: selector(".AFEndTextAlign:alias");
  }

  .TreeDisclosedSymbol:alias {
    text-decoration: none;
    -tr-rule-ref: selector(".AFDarkForeground:alias");
  }

  .p_OraTreeDisclosedSymbol A:link {
    -tr-rule-ref: selector(".TreeDisclosedSymbol:alias");
  }

  .p_OraTreeDisclosedSymbol A:active {
    -tr-rule-ref: selector(".TreeDisclosedSymbol:alias");
  }

  .p_OraTreeDisclosedSymbol A:visited {
    -tr-rule-ref: selector(".TreeDisclosedSymbol:alias");
  }

  .p_OraTreeIcon {
    vertical-align: top;
  }

  .p_OraTreeNodeAdjust {
    padding-bottom: 2px;
  }

  .p_OraTreeRow {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
  }

  .p_OraTreeRow A:link {
    -tr-rule-ref: selector(".AFLinkForeground:alias");
  }

  .p_OraTreeRow A:active {
    -tr-rule-ref: selector(".AFLinkForeground:alias");
  }

  .p_OraTreeRow A:visited {
    -tr-rule-ref: selector(".AFLinkForeground:alias");
  }

  .p_OraTreeRowSelected {
    -tr-rule-ref: selector(".AFDefaultBoldFont:alias");
    -tr-rule-ref: selector(".AFDarkForeground:alias");
  }

  .TreeRowSelected:alias {
    text-decoration: none;
    -tr-rule-ref: selector(".AFDarkForeground:alias");
  }

  .p_OraTreeRowSelected A:link {
    -tr-rule-ref: selector(".TreeRowSelected:alias");
  }

  .p_OraTreeRowSelected A:active {
    -tr-rule-ref: selector(".TreeRowSelected:alias");
  }

  .p_OraTreeRowSelected A:visited {
    -tr-rule-ref: selector(".TreeRowSelected:alias");
  }


  /**
    Chart Styles
  **/
  af|chart {
    /** default width and height for chart **/
    width: 400px;
    height: 300px;
    background-color: white;
  }

  /**
       The following set of styles define server-side styles used by
       the UIX.  These styles affect the appearance of images such as buttons
       and tab bars which are dynamically generated.  They are named styles,
       as these styles should not appear in the generated CSS files.

       Note that since these styles apply to images generated
       by on the server, modifying these styles can result in
       additional image generation.  So, these styles should only be
       modified if the server-side environment has been configured to
       support image generation.  That is, these styles should not be
       modified unless the JSP/Servlet has access to an X server and
       the necessary fonts have been installed.
  **/

  .p_OraOnePixelLine {
    -tr-rule-ref: selector(".AFDarkAccentBackground:alias");
    font-size: 0pt;
    overflow: hidden;
    height: 1px;
    width: 100%;
  }

   /**Used for images in standards mode **/
  .p_OraDisplayBlock {
    display: block;
  }

  .p_OraHideSkipNaviText {
    font-size: 1pt;
    margin-top: 0px;
    margin-left: -999px;
  }

  /** Portlet styles **/
  .PortletBodyColor {
    -tr-rule-ref: selector(".AFBoxBackground:alias");
    -tr-rule-ref: selector(".AFPanelBoxBody:alias");
  }

  .PortletHeaderColor {
    -tr-rule-ref: selector("af|panelBox::header");
  }

  .PortletHeaderLink {
    -tr-rule-ref: selector(".AFSelectedTextForeground:alias");
    text-decoration: none;
  }

  .PortletHeaderStyle {
  }

  .PortletHeaderText {
    -tr-rule-ref: selector(".AFHeaderLevelOne");
  }

  .PortletHeading1 {
    -tr-rule-ref: selector(".AFHeaderLevelOne");
  }

  .PortletHeading2 {
    -tr-rule-ref: selector(".AFHeaderLevelTwo");
  }

  .PortletHeading3 {
    -tr-rule-ref: selector(".AFHeaderLevelThreePlus");
  }

  .PortletHeading4 {
    -tr-rule-ref: selector(".AFHeaderLevelThreePlus");
  }

  .PortletSubHeaderColor {
    -tr-rule-ref: selector(".AFBoxBackground:alias");
    -tr-rule-ref: selector(".AFPanelBoxBody:alias");
  }

  .PortletSubHeaderLink {
    -tr-rule-ref: selector(".AFSelectedTextForeground:alias");
    text-decoration: none;
  }


  .PortletSubHeaderText {
    -tr-rule-ref: selector(".AFHeaderLevelOne");
  }

  .PortletText1 {
    -tr-rule-ref: selector(".AFInstructionText");
  }

  .PortletText2 {
    -tr-rule-ref: selector(".AFInstructionText");
  }

  .PortletText3 {
    -tr-rule-ref: selector(".AFInstructionText");
  }

  .PortletText4 {
    -tr-rule-ref: selector(".AFInstructionText");
  }

  .portlet-font {
    -tr-rule-ref: selector(".AFVerySmallFont:alias");
  }

  .portlet-font-dim {
    -tr-rule-ref: selector(".AFFieldTextDisabled");
  }

  .portlet-msg-info {
    -tr-rule-ref: selector("af|messages::message-text");
  }

  .portlet-msg-error {
    -tr-rule-ref: selector("af|messages::error");
  }

  .portlet-section-header {
    -tr-rule-ref: selector(".AFHeaderLevelOne");
  }

  .portlet-section-body {
    -tr-rule-ref: selector("BODY");
  }

  .portlet-section-alternate {
    -tr-rule-ref: selector("af|column::cell-text-band");
  }

  .portlet-section-selected {
    -tr-rule-ref: selector("af|column::cell-text");
  }

  .portlet-section-subheader {
    -tr-rule-ref: selector(".AFHeaderLevelOne");
  }

  .portlet-section-footer {
    -tr-rule-ref: selector("af|table::column-footer");
  }

  .portlet-section-text {
    -tr-rule-ref: selector("af|column::cell-icon-format");
  }

  .portlet-table-header {
    -tr-rule-ref: selector(".AFHeaderLevelOne");
  }

  /** TODO: AdamWiner: This can't be correct **/
  .portlet-table-body {
    -tr-rule-ref: selector("BODY");
  }

  .portlet-table-alternate {
    -tr-rule-ref: selector("af|column::cell-text-band");
  }

  .portlet-table-selected {
    -tr-rule-ref: selector("af|column::cell-text");
  }

  .portlet-table-subheader {
    -tr-rule-ref: selector(".AFHeaderLevelOne");
  }

  .portlet-table-subheader {
    -tr-rule-ref: selector(".AFHeaderLevelOne");
  }


  .portlet-table-footer {
    -tr-rule-ref: selector("af|table::column-footer");
  }

  .portlet-table-text {
    -tr-rule-ref: selector("af|column::cell-icon-format");
  }

  .portlet-form-label {
    -tr-rule-ref: selector(".AFLabel:alias");
  }

  .portlet-form-input-field {
    -tr-rule-ref: selector("af|inputText::content");
  }

  .portlet-form-button {
    -tr-rule-ref: selector(".AFDefaultFont:alias");
  }

  .portlet-icon-label {
    -tr-rule-ref: selector(".AFLabel:alias");
  }

  .portlet-dlg-icon-label {
    -tr-rule-ref: selector(".AFLabel:alias");
  }

  .portlet-form-field-label {
    -tr-rule-ref: selector(".AFLabel:alias");
  }

  .portlet-form-field {
    -tr-rule-ref: selector(".AFInstructionText");
  }

/* end main stylesheet */

/**
  This style sheet resets the server font family for ISO Latin 1 Locales.
  For most locales, we are forced to use the Albany fonts with antialising
  enabled due to the poor job that Java2D (pre-JDK 1.4) does rasterizing
  true type fonts.  For Latin 1 languages, we avoid antialiasing by using
  native fonts (and thus use the native rasterizer instead of the Java2D
  rasterizer).  The assumption here is that the Dialog font defines all
  of the glyphs needed to render Latin 1 text.  If this is not the case
  on some particular platform, then this style sheet should be removed,
  in which case antialiased Albany text will be rendered for all languages.

  For now, we only use Dialog for English - other locales can be added
  here as desired.
**/

/* start ltr */
  .AFPanelBorderLayoutStart:alias:ltr {
    position: absolute;
    left: 0px;
  }
  .AFPanelBorderLayoutEnd:alias:ltr {
    position: absolute;
    right: 0px;
  }
/* end ltr */

/* start rtl */
  .LTROverride:alias:rtl {
    unicode-bidi: bidi-override;
    direction: ltr;
    text-align: right;
  }

   af|inputNumberSpinbox::spinbox-cell:rtl {
    padding-right: 1px;
  }
  af|inputColor::swatch-overlay:rtl{
    position: relative;
    right: -7px;
    top: 5px;
  }

  af|inputColor::swatch-overlay:rtl {
    position: relative;
    right: -7px;
    top: 5px;
  }

  /** Disable absolute position of treeTable expansion icon **/
  af|treeTable::expansion:rtl {
    -tr-inhibit: position;
    -tr-inhibit: top;
    -tr-inhibit: left;
  }

  /** Adjust positioning of colorField swatch overlay icon **/
  .OraColorFieldSwatchOverlayIcon:rtl {
    /** Unset left property - use right positioning instead **/
    -tr-inhibit: left;
    right: -7px;
    top: 5px;
  }

  .MessageBoxMargin:alias:rtl {
    -tr-inhibit: margin-left;
    margin-right: 25px;
  }

  .OraShuttleHeader:rtl {
    padding: 0px 18px 0px 0px;
  }

  .p_OraQuickSearchBox:rtl {
    border-width: 0px 1px 1px 0px;
  }

  .p_OraGlobalQuick:rtl {
    border-width: 0px 1px 0px 0px;
  }

  .AFStartTextAlign:alias:rtl {
    text-align: right;
  }

  .AFEndTextAlign:alias:rtl {
    text-align: left;
  }

  .AFFloatStart:alias:rtl {
    float: right;
  }

  .AFFloatEnd:alias:rtl {
    float: left;
  }

  .AFEndPadding:alias:rtl {
  	padding: 0px 0px 0px 8px;
  }

  .AFStartPadding:alias:rtl {
  	padding: 0px 8px 0px 0px;
  }

  .nestedList:alias:rtl {
    padding: 0pt 10pt 0pt 0pt;
  }

  af|messages::list:rtl {
    margin: 5px 25px 0px 0px ;
  }

  .p_OraHeaderImage:rtl {
    margin: 0pt 0pt 0pt 2pt;
  }

  .AFPanelBorderLayoutStart:alias:rtl {
    position: absolute;
    right: 0px;
  }

  .AFPanelBorderLayoutEnd:alias:rtl {
    position: absolute;
    left: 0px;
  }

/* end rtl */

@agent ie {

  body {
    margin-top: 8px;
  }

  .p_OraNav2 {
    -tr-rule-ref: selector(".AFMediumBorder:alias");
  }

  .p_OraHideSkipNaviText {
    font-size: 0pt;
    margin-top: 0px;
    margin-left: -999px;
  }

  .ShowDetailFrameMenuItemBase:alias {
    width: 100%;
  }

  af|navigationPane {
    height: 100%;
  }
}
/* end @agent ie */

/** Use "relative" font sizes on Windows IE **/
@platform windows, ppc { 
  @agent ie and (version: 6) {
    @mode quirks {

  /** Override the default font sizes to use "scalable" size units **/
  /** The default font **/
  .AFDefaultFont:alias {
    font-size: x-small;
  }

  /** A very small font **/
  .AFVerySmallFont:alias {
    font-size: 67%;
  }

  /** Very small font for text links.  The VerySmallLinkFont needs to use
       a larger font size than the AFVerySmallFont style, because the
       percentage size is resolved relative to the link's font size (10pt),
       instead of relative to the browser's default font size (12pt) **/
  .VerySmallLinkFont:alias {
    font-size: 80%;
  }

  /** A small font **/
  .AFSmallFont:alias {
    font-size: 75%;
  }

  /** Small font for text links.  The SmallLinkFont needs to use
       a larger font size than the AFSmallFont style, because the
       percentage size is resolved relative to the link's font size (10pt),
       instead of relative to the browser's default font size (12pt) **/
  .SmallLinkFont:alias {
    font-size: 90%;
  }

  /** A medium font - just slightly bigger than default **/
  .AFMediumFont:alias {
    font-size: 92%;
  }

  /** A large font **/
  .AFLargeFont:alias {
    font-size: small;
  }

  /** A very large font **/
  .AFVeryLargeFont:alias {
    font-size: 133%;
  }

  .p_OraHeaderNest {
    margin: 5px 0px 0px 0px;
    width: 97%;
    clear: both;
    -tr-rule-ref: selector(".AFFloatEnd:alias");
  }

  af|column::sortable-header-text {
    /** Use IE's proprietary hand cursor **/
    cursor: hand;
  }

}}}
/* end stylesheet */

@agent webkit {
  .p_OraHideSkipNaviText {
    font-size: 1pt;
    margin-top: 0px;
    margin-left: -999px;
    position: absolute;
  }

  /** Breadcrumbs render DIV inside SPAN, this is a work-around to avoid altering the DOM
       structure at this time **/
  af|breadCrumbs {
    display: table;
  }
  af|breadCrumbs > DIV {
    display: table-row;
  }
}

@platform ppc {
  @agent ie and (version: 6) {
    @mode standards {

  /** Override the default font sizes to use "scalable" size units **/
  /** The default font **/
  .AFDefaultFont:alias {
    font-size: small;
  }

  /** A very small font **/
  .AFVerySmallFont:alias {
    font-size: 67%;
  }

  /** Very small font for text links.  The VerySmallLinkFont needs to use
       a larger font size than the AFVerySmallFont style, because the
       percentage size is resolved relative to the link's font size (10pt),
       instead of relative to the browser's default font size (12pt) **/
  .VerySmallLinkFont:alias {
    font-size: 80%;
  }

  /** A small font **/
  .AFSmallFont:alias {
    font-size: 75%;
  }

  /** Small font for text links.  The SmallLinkFont needs to use
       a larger font size than the AFSmallFont style, because the
       percentage size is resolved relative to the link's font size (10pt),
       instead of relative to the browser's default font size (12pt) **/
  .SmallLinkFont:alias {
    font-size: 90%;
  }

  /** A medium font - just slightly bigger than default **/
  .AFMediumFont:alias {
    font-size: 92%;
  }

  /** A large font **/
  .AFLargeFont:alias {
    font-size: medium;
  }

  /** A very large font **/
  .AFVeryLargeFont:alias {
    font-size: 133%;
  }

  .p_OraHeaderNest {
    margin: 5px 0px 0px 0px;
    width: 97%;
    clear: both;
    -tr-rule-ref: selector(".AFFloatEnd:alias");
  }

  af|column::sortable-header-text {
    /** Use IE's proprietary hand cursor **/
    cursor: hand;
  }

} } } 
/* end stylesheet */


/** The base derivation for ICE-based browsers **/
@agent ice {

  .list:alias {
    /** ice doesn't seem to respect list-style-position,
         so adding padding as workaround **/
    padding: 0px 0px 0px 12px;
  }
}

/** The base derivation for Gecko-based browsers **/
@agent gecko {

  /** Dunno why, but Gecko makes asterisks look very thin **/
  .AFRequiredIconStyle {
    font-weight: bold;
  }

  .p_OraContentFooterRule {
    -tr-rule-ref: selector(".AFDarkBackground:alias");
  }

  af|column::sortable-header-text {
     border-style: inset;
  }

  af|inputDate::content {
    line-height: 1.8;
  }

  af|menuButtons::icon-style {
    vertical-align: bottom;
  }

  .p_OraHideSkipNaviText {
    font-size: 0pt;
    margin-top: 0px;
    margin-left: 0px;
  }

  /** Breadcrumbs render DIV inside SPAN, this is a work-around to avoid altering the DOM
       structure at this time **/
  af|breadCrumbs {
    display: table;
  }
  af|breadCrumbs > DIV {
    display: table-row;
  }
}
/* end stylesheet */

/** But: in CJK, IE is having some bad problems with sizing lists
  and choices correctly - this is bug 2440402.  For the two styles
  that are relevant here, work around the problem using size 100%.  That's
  not perfect, since it'll make these resolve relative to their
  container, but it seems to work well in practice. **/
@platform windows, ppc {
  @agent ie {
    @locale ja, zh, ko {
  .AFFieldText {
    font-size: 100%;
  }

  .AFFieldTextDisabled {
    font-size: 100%;
  }
} } }

